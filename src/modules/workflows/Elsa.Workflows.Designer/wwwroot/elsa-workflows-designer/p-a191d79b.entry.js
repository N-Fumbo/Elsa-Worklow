import{r as t,c as s,h as e}from"./p-a7a3baa1.js";import{F as i}from"./p-93025d0a.js";import{W as o}from"./p-92761193.js";import"./p-ec4413cd.js";const c=class{constructor(e){t(this,e),this.workflowDefinitionChanged=s(this,"workflowDefinitionChanged",7),this.onSelectedProvidersChanged=e=>{const t=e.detail;this.selectList={items:this.selectList.items.map((e=>Object.assign(Object.assign({},e),{selected:t.includes(e.value)})))},this.workflowDefinition.customProperties[o]=t,this.workflowDefinitionChanged.emit(this.workflowDefinition)},this.descriptors=[],this.workflowDefinition=void 0,this.selectList={items:[]},this.selectedProviderTypes=[]}async componentWillLoad(){var e;const t=this.workflowDefinition,s=null!==(e=null==t?void 0:t.customProperties[o])&&void 0!==e?e:[],i=this.descriptors.map((e=>({text:e.name,value:e.type})));this.selectList={items:i},this.selectedProviderTypes=s}render(){const t=this.selectList;return e(i,{label:"Active providers",fieldId:"EnabledProviders",hint:"Select the providers to activate for this workflow."},e("elsa-check-list",{selectList:t,selectedValues:this.selectedProviderTypes,onSelectedValuesChanged:this.onSelectedProvidersChanged}))}};export{c as elsa_workflow_context_provider_check_list};