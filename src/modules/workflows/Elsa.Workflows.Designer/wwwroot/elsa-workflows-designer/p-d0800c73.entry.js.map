{"version":3,"names":["ActivityPropertiesEditor","constructor","hostRef","this","getSelectedTabIndex","tabs","selectedTabIndex","length","createTabs","activityDescriptor","findActivityDescriptor","isTask","kind","ActivityKind","Task","commonTab","displayText","order","content","renderCommonTab","inputTab","renderInputTab","outputs","outputTab","renderOutputTab","push","taskTab","renderTaskTab","createInputs","activity","activityId","id","driverRegistry","inputDriverRegistry","onInputChanged","inputDescriptor","activityUpdated","emit","newId","originalId","filteredInputs","inputs","filter","x","isBrowsable","map","renderInputContext","notifyInputChanged","inputChanged","v","s","onInputPropertyEditorChanged","driver","get","workflowDefinitionId","activityType","typeName","propertyName","name","control","h","InputControlSwitchContextState","Provider","state","renderInput","inputContext","inputControl","descriptorsStore","activityDescriptors","find","type","version","onSelectedTabIndexChanged","e","detail","onActivityIdChanged","inputElement","target","value","propertyValue","syntax","isWrapped","camelCasePropertyName","camelCase","input","expression","memoryReference","uuid","updateActivity","onOutputPropertyEditorChanged","outputDescriptor","outputTargetValue","outputTargetValuePair","split","outputTargetId","property","propertyDescriptor","renderContext","_b","_a","metadata","canStartWorkflow","_g","_f","_d","_c","customProperties","_e","CanStartWorkflow","key","FormEntry","fieldId","label","hint","onChange","onActivityDisplayTextChanged","CheckboxFormEntry","checked","onCanStartWorkflowChanged","propertyContext","outputDefinitions","variables","outputTargetOptions","items","displayName","isNullOrWhitespace","propertyType","typeDescriptor","variableDescriptors","propertyTypeName","description","class","currentTarget","outputTarget","selected","item","isSelected","runAsynchronously","RunAsynchronously","onRunAsynchronouslyChanged","Container","InputDriverRegistry","eventBus","EventBus","async","slideOverPanel","show","hide","title","onActivityChanged","notifyActivityChanged","ActivityPropertyPanelEvents","Displaying","render","actions","mainTitle","subTitle","isReadonly","orientation","Object","assign","Toolbar","layoutButtons","text","handler","autoLayout","theme","onClick","zoomToFit","Toolbox","onTabSelected","index","preventDefault","selectedCss","defaultCss","activitiesTabCssClass","href","graph","WorkflowDefinitionPropertiesEditor","createModel","model","tabModels","workflowDefinition","options","autoUpdateConsumingWorkflows","usableAsActivity","propertiesTabModel","tab","Widgets","workflow","onPropertyEditorChanged","wf","rows","workflowDetails","definitionId","Version","toString","Status","isPublished","Readonly","InfoList","dictionary","renderPropertiesTab","variablesTabModel","renderVariablesTab","strategies","workflowActivationStrategyDescriptors","firstStrategy","defaultDescription","settingsWidgets","selectElement","activationStrategyType","hintElement","closest","getElementsByClassName","strategy","innerText","settingsTabModel","widgets","inputOutputTabModel","renderInputOutputTab","versionHistoryTabModel","renderVersionHistoryTab","args","notifyWorkflowDefinitionChanged","onWorkflowDefinitionUpdated","WorkflowPropertiesEditorEventTypes","tabModel","onVariablesChanged","onVariablesUpdated","outcomes","onInputsChanged","onInputsUpdated","onOutputsChanged","onOutputsUpdated","onOutcomesChanged","onOutcomesUpdated","selectedVersion","workflowVersions","apply","workflowPropsUpdated","onPropsUpdated","propName","propValue","isLatest","console","debug","updatedTab","getPropEditorSectionByPropName","workflowDefinitionApi","WorkflowDefinitionsApi","readonly","enumKey","keys","WorkflowPropertiesEditorTabs"],"sources":["./src/modules/workflow-definitions/components/activity-properties/activity-properties-editor.tsx","./src/modules/workflow-definitions/components/toolbar.tsx","./src/modules/workflow-definitions/components/toolbox.tsx","./src/modules/workflow-definitions/components/workflow-properties/properties.tsx"],"sourcesContent":["import {Component, Event, EventEmitter, h, Method, Prop, State} from '@stencil/core';\nimport {camelCase} from 'lodash';\nimport {v4 as uuid} from 'uuid';\nimport {Activity, ActivityDescriptor, ActivityInput, ActivityKind, ActivityOutput, Expression, InputDescriptor, OutputDescriptor, PropertyDescriptor, TabChangedArgs, TabDefinition, Variable} from '../../../../models';\nimport {EventBus, InputDriverRegistry} from \"../../../../services\";\nimport {Container} from \"typedi\";\nimport {ActivityInputContext} from \"../../../../services/activity-input-driver\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {ActivityPropertyPanelEvents, ActivityUpdatedArgs, DeleteActivityRequestedArgs} from \"../../models/ui\";\nimport InputControlSwitchContextState from \"../../../../components/shared/input-control-switch/state\";\nimport {OutputDefinition} from \"../../models/entities\";\nimport {RenderActivityInputContext, RenderActivityPropsContext} from \"../models\";\n\n@Component({\n  tag: 'elsa-activity-properties-editor',\n})\nexport class ActivityPropertiesEditor {\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private renderContext: RenderActivityPropsContext;\n  private readonly inputDriverRegistry: InputDriverRegistry;\n  private readonly eventBus: EventBus;\n\n  constructor() {\n    this.inputDriverRegistry = Container.get(InputDriverRegistry);\n    this.eventBus = Container.get(EventBus);\n  }\n\n  @Prop() workflowDefinitionId: string;\n  @Prop() activity?: Activity;\n  @Prop() variables: Array<Variable> = [];\n  @Prop() outputs: Array<OutputDefinition> = [];\n  @Prop() isReadonly: boolean;\n  @Event() activityUpdated: EventEmitter<ActivityUpdatedArgs>;\n  @Event() deleteActivityRequested: EventEmitter<DeleteActivityRequestedArgs>;\n  @State() private selectedTabIndex: number = 0;\n\n  @Method()\n  async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  async componentWillRender() {\n    const activity = this.activity;\n    const activityDescriptor = this.findActivityDescriptor();\n    const title = activityDescriptor?.displayName ?? activityDescriptor?.typeName ?? 'Unknown Activity';\n    const inputs = this.createInputs();\n    const tabs = this.createTabs();\n\n    const onActivityChanged = () => this.activityUpdated.emit({\n      activity,\n      activityDescriptor\n    });\n\n    this.renderContext = {\n      activity,\n      activityDescriptor,\n      title,\n      inputs,\n      tabs,\n      notifyActivityChanged: () => onActivityChanged()\n    }\n\n    await this.eventBus.emit(ActivityPropertyPanelEvents.Displaying, this, this.renderContext);\n  }\n\n  render() {\n    const {activity, activityDescriptor, tabs} = this.renderContext;\n    const actions = [];\n    const mainTitle = activity.id;\n    const subTitle = activityDescriptor.displayName;\n    const selectedTabIndex = this.getSelectedTabIndex(tabs);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.isReadonly}\n        mainTitle={mainTitle}\n        subTitle={subTitle}\n        orientation=\"Landscape\"\n        tabs={tabs}\n        selectedTabIndex={selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}\n        actions={actions}/>\n    );\n  }\n\n  private getSelectedTabIndex = (tabs: Array<TabDefinition>): number => {\n    let selectedTabIndex = this.selectedTabIndex;\n\n    if (selectedTabIndex >= tabs.length)\n      selectedTabIndex = tabs.length - 1;\n\n    if (selectedTabIndex < 0)\n      selectedTabIndex = 0;\n\n    return selectedTabIndex;\n  };\n\n  private createTabs = (): Array<TabDefinition> => {\n    const activityDescriptor = this.findActivityDescriptor();\n    const isTask = activityDescriptor.kind == ActivityKind.Task;\n\n    const commonTab: TabDefinition = {\n      displayText: 'General',\n      order: 0,\n      content: () => this.renderCommonTab()\n    };\n\n    const inputTab: TabDefinition = {\n      displayText: 'Settings',\n      order: 10,\n      content: () => this.renderInputTab()\n    };\n\n    const tabs = !!activityDescriptor ? [inputTab, commonTab] : [];\n\n    if (activityDescriptor.outputs.length > 0) {\n      const outputTab: TabDefinition = {\n        displayText: 'Output',\n        order: 11,\n        content: () => this.renderOutputTab()\n      };\n\n      tabs.push(outputTab);\n    }\n\n    if (isTask) {\n      const taskTab: TabDefinition = {\n        displayText: 'Task',\n        order: 12,\n        content: () => this.renderTaskTab()\n      };\n\n      tabs.push(taskTab);\n    }\n\n    return tabs;\n  };\n\n  private createInputs = (): Array<RenderActivityInputContext> => {\n    const activity = this.activity;\n    const activityId = activity.id;\n    const activityDescriptor = this.findActivityDescriptor();\n    const driverRegistry = this.inputDriverRegistry;\n\n    const onInputChanged = (inputDescriptor: InputDescriptor) => this.activityUpdated.emit({\n      newId: activityId,\n      originalId: activityId,\n      activity,\n      activityDescriptor\n    });\n\n    const filteredInputs = activityDescriptor.inputs.filter(x => x.isBrowsable);\n\n    return filteredInputs.map(inputDescriptor => {\n      const renderInputContext: ActivityInputContext = {\n        activity: activity,\n        activityDescriptor: activityDescriptor,\n        inputDescriptor,\n        notifyInputChanged: () => onInputChanged(inputDescriptor),\n        inputChanged: (v, s) => this.onInputPropertyEditorChanged(inputDescriptor, v, s)\n      };\n\n      const driver = driverRegistry.get(renderInputContext);\n      const workflowDefinitionId = this.workflowDefinitionId;\n      const activityType = activityDescriptor.typeName;\n      const propertyName = inputDescriptor.name;\n\n      const control =\n        <InputControlSwitchContextState.Provider state={{workflowDefinitionId, activityType, propertyName}}>\n          {driver?.renderInput(renderInputContext)}\n        </InputControlSwitchContextState.Provider>;\n\n      return {\n        inputContext: renderInputContext,\n        inputControl: control,\n      }\n    });\n  };\n\n  private findActivityDescriptor = (): ActivityDescriptor => !!this.activity ? descriptorsStore.activityDescriptors.find(x => x.typeName == this.activity.type && x.version == this.activity.version) : null;\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex\n\n  private onActivityIdChanged = (e: any) => {\n    const activity = this.activity;\n    const originalId = activity.id;\n    const inputElement = e.target as HTMLInputElement;\n    const newId = inputElement.value;\n    const activityDescriptor = this.findActivityDescriptor();\n\n    activity.id = newId;\n\n    this.activityUpdated.emit({\n      newId: newId,\n      originalId: originalId,\n      activity,\n      activityDescriptor\n    });\n  }\n\n  private onActivityDisplayTextChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.metadata = {\n      ...activity.metadata,\n      displayText: inputElement.value\n    };\n\n    this.updateActivity();\n  }\n\n  private onCanStartWorkflowChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.customProperties.canStartWorkflow = inputElement.checked;\n\n    this.updateActivity();\n  }\n\n  private onRunAsynchronouslyChanged(e: any) {\n    const activity: Activity = this.activity;\n    const inputElement = e.target as HTMLInputElement;\n\n    activity.customProperties.RunAsynchronously = inputElement.checked;\n\n    this.updateActivity();\n  }\n\n  private onInputPropertyEditorChanged = (inputDescriptor: InputDescriptor, propertyValue: any, syntax: string) => {\n    const activity = this.activity;\n    const propertyName = inputDescriptor.name;\n    const isWrapped = inputDescriptor.isWrapped;\n    const camelCasePropertyName = camelCase(propertyName);\n\n    if (isWrapped) {\n      let input: ActivityInput = activity[camelCasePropertyName];\n\n      const expression: Expression = {\n        type: syntax,\n        value: propertyValue // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\n      };\n\n      if (!input) {\n        input = {\n          typeName: inputDescriptor.typeName,\n          memoryReference: {id: uuid()},\n          expression: expression\n        }\n      }\n\n      input.expression = expression;\n      activity[camelCasePropertyName] = input;\n\n    } else {\n      activity[camelCasePropertyName] = propertyValue;\n    }\n    this.updateActivity(propertyName);\n  }\n\n  private onOutputPropertyEditorChanged = (outputDescriptor: OutputDescriptor, outputTargetValue: string) => {\n    const activity = this.activity;\n    const propertyName = outputDescriptor.name;\n    const camelCasePropertyName = camelCase(propertyName);\n    const outputTargetValuePair = outputTargetValue.split('::');\n    const outputTargetId = outputTargetValuePair[1];\n\n    const property: ActivityOutput = {\n      typeName: outputDescriptor.typeName,\n      memoryReference: {\n        id: outputTargetId\n      }\n    }\n\n    activity[camelCasePropertyName] = property;\n\n    this.updateActivity(propertyName);\n  }\n\n  private updateActivity = (propertyName?: string, propertyDescriptor?: PropertyDescriptor) => {\n    const activityDescriptor = this.findActivityDescriptor();\n    const activity = this.activity;\n    const activityId = activity.id;\n\n    this.activityUpdated.emit({\n      newId: activityId,\n      originalId: activityId,\n      activity,\n      activityDescriptor\n    });\n  }\n\n  private renderCommonTab = () => {\n    const {activity} = this.renderContext;\n    const activityId = activity.id;\n    const displayText: string = activity.metadata?.displayText ?? '';\n    const canStartWorkflow: boolean = activity.customProperties?.canStartWorkflow ?? activity?.customProperties?.CanStartWorkflow ?? activity.canStartWorkflow ?? false;\n    const key = `${activityId}`;\n\n    return <div key={key}>\n      <FormEntry fieldId=\"ActivityId\" label=\"ID\" hint=\"The ID of the activity.\">\n        <input type=\"text\" name=\"ActivityId\" id=\"ActivityId\" value={activityId} onChange={e => this.onActivityIdChanged(e)}/>\n      </FormEntry>\n\n      <FormEntry fieldId=\"ActivityDisplayText\" label=\"Display Text\" hint=\"The text to display on the activity in the designer.\">\n        <input type=\"text\" name=\"ActivityDisplayText\" id=\"ActivityDisplayText\" value={displayText} onChange={e => this.onActivityDisplayTextChanged(e)}/>\n      </FormEntry>\n\n      <CheckboxFormEntry fieldId=\"CanStartWorkflow\" label=\"Can start workflow\" hint=\"When enabled, this activity can be used as a trigger to automatically start the workflow.\">\n        <input type=\"checkbox\" name=\"CanStartWorkflow\" id=\"CanStartWorkflow\" value={\"true\"} checked={canStartWorkflow} onChange={e => this.onCanStartWorkflowChanged(e)}/>\n      </CheckboxFormEntry>\n\n    </div>\n  };\n\n  private renderInputTab = () => {\n    const {activity, inputs} = this.renderContext;\n    const activityId = activity.id;\n    const key = `${activityId}`;\n\n    return <div key={key}>\n      {inputs.filter(x => !!x.inputControl).map(propertyContext => {\n        const key = `${activity.id}-${propertyContext.inputContext.inputDescriptor.name}`;\n        return <div key={key}>\n          {propertyContext.inputControl}\n        </div>;\n      })}\n    </div>\n  };\n\n  private renderOutputTab = () => {\n    const {activity, activityDescriptor} = this.renderContext;\n    const outputs = activityDescriptor.outputs;\n    const outputDefinitions = this.outputs || [];\n    const variables = this.variables || [];\n    const activityId = activity.id;\n    const key = `${activityId}`;\n    const outputTargetOptions: Array<any> = [null];\n\n    if (variables.length > 0) {\n      outputTargetOptions.push({label: 'Variables', items: [...variables.map(x => ({value: x.id, name: x.name}))], kind: 'variable'});\n    }\n\n    if (outputDefinitions.length > 0)\n      outputTargetOptions.push({label: 'Outputs', items: [...outputDefinitions.map(x => ({value: x.name, name: x.name}))], kind: 'output'});\n\n    return <div key={key}>\n      {outputs.map(propertyDescriptor => {\n        const key = `${activity.id}-${propertyDescriptor.name}`;\n        const displayName = isNullOrWhitespace(propertyDescriptor.displayName) ? propertyDescriptor.name : propertyDescriptor.displayName;\n        const propertyName = camelCase(propertyDescriptor.name);\n        const propertyValue = activity[propertyName] as ActivityOutput;\n        const propertyType = propertyDescriptor.typeName;\n        const typeDescriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == propertyType);\n        const propertyTypeName = typeDescriptor?.displayName ?? propertyType;\n\n        return <div key={key}>\n          <FormEntry fieldId={key} label={displayName} hint={propertyDescriptor.description}>\n\n            <div class=\"tw-relative\">\n              <select onChange={e => this.onOutputPropertyEditorChanged(propertyDescriptor, (e.currentTarget as HTMLSelectElement).value)}>\n                {outputTargetOptions.map(outputTarget => {\n                  if (!outputTarget) {\n                    return <option value=\"\" selected={!propertyValue?.memoryReference?.id}>-</option>\n                  }\n\n                  const items = outputTarget.items;\n\n                  return (\n                    <optgroup label={outputTarget.label}>\n                      {items.map(item => {\n                        const isSelected = propertyValue?.memoryReference?.id == item.value;\n                        return <option value={`${outputTarget.kind}::${item.value}`} selected={isSelected}>{item.name}</option>;\n                      })}\n                    </optgroup>);\n                })}\n              </select>\n              <div class=\"tw-pointer-events-none tw-absolute tw-inset-y-0 tw-right-0 tw-flex tw-items-center pr-10\">\n                <span class=\"tw-text-gray-500 sm:tw-text-sm\">{propertyTypeName}</span>\n              </div>\n            </div>\n          </FormEntry>\n        </div>;\n      })}\n    </div>\n  };\n\n  private renderTaskTab = () => {\n    const {activity} = this.renderContext;\n    const activityId = activity.id;\n    const runAsynchronously: boolean = activity.customProperties?.RunAsynchronously ?? activity.runAsynchronously ?? false;\n    const key = `${activityId}:task`;\n\n    return <div key={key}>\n      <CheckboxFormEntry fieldId=\"RunAsynchronously\" label=\"Execute asynchronously\" hint=\"When enabled, this activity will execute asynchronously and suspend workflow execution until the activity is finished.\">\n        <input type=\"checkbox\" name=\"RunAsynchronously\" id=\"RunAsynchronously\" value={\"true\"} checked={runAsynchronously} onChange={e => this.onRunAsynchronouslyChanged(e)}/>\n      </CheckboxFormEntry>\n    </div>\n  };\n}\n","import {Component, h, Prop, Event, EventEmitter} from '@stencil/core';\nimport {DropdownButtonItem} from \"../../../components/shared/dropdown-button/models\";\nimport {LayoutDirection} from \"../../flowchart/models\";\nimport {PlayButtonIcon} from \"../../../components/icons/buttons/play\";\n\n@Component({\n  tag: 'elsa-workflow-definition-editor-toolbar',\n})\nexport class Toolbar {\n  @Prop()\n  public zoomToFit: () => Promise<void>;\n\n  @Event()\n  public autoLayout: EventEmitter<LayoutDirection>;\n\n  render() {\n\n    const layoutButtons: Array<DropdownButtonItem> = [{\n      text: 'Horizontally',\n      handler: () => this.autoLayout.emit('LR')\n    },{\n      text: 'Vertically',\n      handler: () => this.autoLayout.emit('TB')\n    }];\n\n    return (\n      <div class=\"elsa-panel-toolbar tw-flex tw-justify-center tw-absolute tw-border-b tw-border-gray-200 tw-top-0 tw-px-1 tw-pl-4 tw-pb-2 tw-text-sm tw-bg-white tw-z-10 tw-space-x-2\">\n        <elsa-dropdown-button text=\"Auto-layout\" theme=\"Primary\" items={layoutButtons} class=\"tw-mt-2\"/>\n        <button onClick={this.zoomToFit} class=\"elsa-btn elsa-btn-primary\">\n          Zoom to fit\n        </button>\n        {/*Coming soon...*/}\n        {/*<button class=\"elsa-btn elsa-btn-action disabled\" disabled={true}>*/}\n        {/*  <PlayButtonIcon/> Run*/}\n        {/*</button>*/}\n      </div>\n    );\n  }\n}\n","import {Component, h, Prop, State} from '@stencil/core';\nimport {Graph} from '@antv/x6';\n\n@Component({\n  tag: 'elsa-workflow-definition-editor-toolbox',\n})\nexport class Toolbox {\n  @Prop() graph: Graph;\n  @Prop() isReadonly: boolean;\n  @State() selectedTabIndex: number = 0;\n\n  private onTabSelected = (e: Event, index: number) => {\n    e.preventDefault();\n    this.selectedTabIndex = index;\n  };\n\n  render() {\n\n    const selectedTabIndex = this.selectedTabIndex;\n    const selectedCss = 'tw-border-blue-500 tw-text-blue-600';\n    const defaultCss = 'tw-border-transparent tw-text-gray-500 hover:tw-text-gray-700 hover:tw-border-gray-300';\n    const activitiesTabCssClass = selectedTabIndex == 0 ? selectedCss : defaultCss;\n\n    return (\n\n      <div class=\"activity-list tw-absolute tw-inset-0 tw-overflow-hidden\">\n        <div class=\"tw-h-full tw-flex tw-flex-col\">\n          <div class=\"tw-border-b tw-border-gray-200\">\n            <nav class=\"-tw-mb-px tw-flex\" aria-label=\"Tabs\">\n              <a href=\"#\"\n                 onClick={e => this.onTabSelected(e, 0)}\n                 class={`${activitiesTabCssClass} tw-w-1/2 tw-py-4 tw-px-1 tw-text-center tw-border-b-2 tw-font-medium tw-text-sm`}>\n                Activities\n              </a>\n            </nav>\n          </div>\n\n          <div class=\"tw-flex-1 tw-relative\">\n            <div class=\"tw-absolute tw-inset-0 tw-overflow-y-scroll\">\n              <elsa-workflow-definition-editor-toolbox-activities\n                isReadonly={this.isReadonly}\n                graph={this.graph}\n                class={selectedTabIndex == 0 ? '' : 'hidden'}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import {Component, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../../services\";\nimport {InputDefinition, OutputDefinition, WorkflowDefinition, WorkflowOptions} from \"../../models/entities\";\nimport {PropertiesTabModel, TabModel, Widget, WorkflowDefinitionPropsUpdatedArgs, WorkflowPropertiesEditorDisplayingArgs, WorkflowPropertiesEditorEventTypes, WorkflowPropertiesEditorModel} from \"../../models/ui\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\nimport {InfoList} from \"../../../../components/shared/forms/info-list\";\nimport {TabChangedArgs, Variable} from \"../../../../models\";\nimport {WorkflowDefinitionsApi} from \"../../services/api\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {WorkflowPropertiesEditorTabs} from \"../../models/props-editor-tabs\";\n\n@Component({\n  tag: 'elsa-workflow-definition-properties-editor',\n})\nexport class WorkflowDefinitionPropertiesEditor {\n  private readonly eventBus: EventBus;\n  private slideOverPanel: HTMLElsaSlideOverPanelElement;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n\n    this.model = {\n      tabModels: [],\n    }\n  }\n\n  @Prop() workflowDefinition?: WorkflowDefinition;\n  @Prop() workflowVersions: Array<WorkflowDefinition>;\n  @Prop() readonly: boolean;\n  @Event() workflowPropsUpdated: EventEmitter<WorkflowDefinitionPropsUpdatedArgs>;\n  @Event() versionSelected: EventEmitter<WorkflowDefinition>;\n  @Event() deleteVersionClicked: EventEmitter<WorkflowDefinition>;\n  @Event() revertVersionClicked: EventEmitter<WorkflowDefinition>;\n  @State() private model: WorkflowPropertiesEditorModel;\n  @State() private selectedTabIndex: number = 0;\n\n  @Method()\n  public async show(): Promise<void> {\n    await this.slideOverPanel.show();\n  }\n\n  @Method()\n  public async hide(): Promise<void> {\n    await this.slideOverPanel.hide();\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged() {\n    await this.createModel();\n  }\n\n  @Watch('workflowVersions')\n  async onWorkflowVersionsChanged() {\n    await this.createModel();\n  }\n\n  async componentWillLoad() {\n    await this.createModel();\n  }\n\n  public render() {\n    const workflowDefinition = this.workflowDefinition;\n    const title = workflowDefinition?.name ?? 'Untitled';\n    const subTitle = 'Workflow Definition'\n    const tabs = this.model.tabModels.map(x => x.tab);\n\n    return (\n      <elsa-form-panel\n        isReadonly={this.readonly}\n        mainTitle={title}\n        subTitle={subTitle}\n        tabs={tabs}\n        selectedTabIndex={this.selectedTabIndex}\n        onSelectedTabIndexChanged={e => this.onSelectedTabIndexChanged(e)}/>\n    );\n  }\n\n  private createModel = async () => {\n    const model = {\n      tabModels: []\n    };\n\n    const workflowDefinition = this.workflowDefinition;\n    const options: WorkflowOptions = workflowDefinition.options || {};\n    const autoUpdateConsumingWorkflows = options.autoUpdateConsumingWorkflows ?? false;\n    const usableAsActivity = options.usableAsActivity ?? false;\n\n    if (!workflowDefinition) {\n      this.model = model;\n      return;\n    }\n\n    const propertiesTabModel: PropertiesTabModel = {\n      name: 'properties',\n      tab: null,\n      Widgets: [{\n        name: 'workflowName',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label=\"Name\" fieldId=\"workflowName\" hint=\"The name of the workflow.\">\n            <input type=\"text\" name=\"workflowName\" id=\"workflowName\" value={workflow.name} onChange={e => this.onPropertyEditorChanged(wf => wf.name = (e.target as HTMLInputElement).value)}/>\n          </FormEntry>;\n        },\n        order: 0\n      }, {\n        name: 'workflowDescription',\n        content: () => {\n          const workflow = this.workflowDefinition;\n          return <FormEntry label=\"Description\" fieldId=\"workflowDescription\" hint=\"A brief description about the workflow.\">\n            <textarea name=\"workflowDescription\" id=\"workflowDescription\" value={workflow.description} rows={6} onChange={e => this.onPropertyEditorChanged(wf => wf.description = (e.target as HTMLTextAreaElement).value)}/>\n          </FormEntry>;\n        },\n        order: 5\n      }, {\n        name: 'workflowInfo',\n        content: () => {\n          const workflow = this.workflowDefinition;\n\n          const workflowDetails = {\n            'Definition ID': isNullOrWhitespace(workflow.definitionId) ? '(new)' : workflow.definitionId,\n            'Version ID': isNullOrWhitespace(workflow.id) ? '(new)' : workflow.id,\n            'Version': workflow.version.toString(),\n            'Status': workflow.isPublished ? 'Published' : 'Draft',\n            'Readonly': workflow.isReadonly ? 'Yes' : 'No'\n          };\n\n          return <InfoList title=\"Information\" dictionary={workflowDetails}/>;\n        },\n        order: 10\n      }]\n    };\n\n    propertiesTabModel.tab = {\n      displayText: 'Properties',\n      order: 0,\n      content: () => this.renderPropertiesTab(propertiesTabModel)\n    };\n\n    const variablesTabModel: TabModel = {\n      name: 'variables',\n      tab: {\n        displayText: 'Variables',\n        order: 5,\n        content: () => this.renderVariablesTab()\n      }\n    }\n\n    const strategies = descriptorsStore.workflowActivationStrategyDescriptors;\n    const firstStrategy = strategies.length > 0 ? strategies[0] : null;\n    const defaultDescription = firstStrategy?.description ?? '';\n\n    const settingsWidgets: Array<Widget> = [\n      {\n        name: 'workflowActivationValidator',\n        order: 0,\n        content: () => <FormEntry label=\"Activation Strategy\" fieldId=\"workflowActivationStrategyType\" hint={defaultDescription}>\n          <select name=\"workflowActivationStrategyType\" onChange={e => this.onPropertyEditorChanged(wf => {\n            const selectElement = (e.target as HTMLSelectElement);\n            options.activationStrategyType = selectElement.value;\n            wf.options = options;\n\n            const hintElement: HTMLElement = selectElement.closest('.form-entry').getElementsByClassName('form-field-hint')[0] as HTMLElement;\n            const strategy = strategies.find(x => x.typeName == selectElement.value);\n            hintElement.innerText = strategy.description;\n          })}>\n            {strategies.map(strategy => <option value={strategy.typeName} selected={strategy.typeName == options.activationStrategyType}>{strategy.displayName}</option>)}\n          </select>\n        </FormEntry>\n      },\n      {\n        name: 'usableAsActivity',\n        order: 0,\n        content: () => <CheckboxFormEntry label=\"Usable As Activity\" fieldId=\"UsableAsActivity\" hint=\"Allow this workflow to be used as an activity.\">\n          <input type=\"checkbox\" id=\"UsableAsActivity\" name=\"UsableAsActivity\" checked={usableAsActivity} onChange={e => this.onPropertyEditorChanged(wf => {\n            const inputElement = (e.target as HTMLInputElement);\n            wf.options.usableAsActivity = inputElement.checked;\n            this.createModel();\n          })}/>\n        </CheckboxFormEntry>\n      },\n      {\n        name: 'autoUpdateConsumingWorkflows',\n        order: 0,\n        content: () =>\n          <CheckboxFormEntry fieldId=\"UpdateConsumingWorkflows\" label=\"Auto-update consuming workflows\" hint=\"When you publish a new version, all of the consuming workflows will be updated to point to the new version of this workflow.\">\n            <input type=\"checkbox\" name=\"UpdateConsumingWorkflows\" id=\"UpdateConsumingWorkflows\" checked={autoUpdateConsumingWorkflows} onChange={e => this.onPropertyEditorChanged(wf => {\n              const inputElement = e.target as HTMLInputElement;\n              options.autoUpdateConsumingWorkflows = inputElement.checked;\n              wf.options = options;\n            })}/>\n          </CheckboxFormEntry>\n      }\n    ];\n\n    const settingsTabModel: TabModel = {\n      name: 'settings',\n      tab: {\n        displayText: 'Settings',\n        order: 10,\n        content: () => <elsa-widgets widgets={settingsWidgets}/>\n      }\n    }\n\n    const inputOutputTabModel: TabModel = {\n      name: 'input-output',\n      tab: {\n        displayText: 'Input/output',\n        order: 15,\n        content: () => this.renderInputOutputTab()\n      }\n    }\n\n    const versionHistoryTabModel: TabModel = {\n      name: 'versionHistory',\n      tab: {\n        displayText: 'Version History',\n        order: 20,\n        content: () => this.renderVersionHistoryTab()\n      }\n    }\n\n    model.tabModels = [propertiesTabModel, variablesTabModel, settingsTabModel, versionHistoryTabModel, inputOutputTabModel];\n\n    const args: WorkflowPropertiesEditorDisplayingArgs = {\n      workflowDefinition,\n      model,\n      notifyWorkflowDefinitionChanged: () => this.onWorkflowDefinitionUpdated()\n    };\n\n    await this.eventBus.emit(WorkflowPropertiesEditorEventTypes.Displaying, this, args);\n\n    this.model = model;\n  }\n\n  private renderPropertiesTab = (tabModel: PropertiesTabModel) => <elsa-widgets widgets={tabModel.Widgets}/>;\n\n  private renderVariablesTab = () => {\n    const variables: Array<Variable> = this.workflowDefinition?.variables ?? [];\n\n    return <div>\n      <elsa-variables-editor variables={variables} onVariablesChanged={e => this.onVariablesUpdated(e)}/>\n    </div>\n  };\n\n  private renderInputOutputTab = () => {\n    const inputs: Array<InputDefinition> = this.workflowDefinition?.inputs ?? [];\n    const outputs: Array<OutputDefinition> = this.workflowDefinition?.outputs ?? [];\n    const outcomes: Array<string> = this.workflowDefinition?.outcomes ?? [];\n\n    return <div>\n      <elsa-workflow-definition-input-output-settings\n        inputs={inputs}\n        outputs={outputs}\n        outcomes={outcomes}\n        onInputsChanged={e => this.onInputsUpdated(e)}\n        onOutputsChanged={e => this.onOutputsUpdated(e)}\n        onOutcomesChanged={e => this.onOutcomesUpdated(e)}\n      />\n    </div>\n  };\n\n  private renderVersionHistoryTab = () => {\n    return <div>\n      <elsa-workflow-definition-version-history\n        selectedVersion={this.workflowDefinition}\n        workflowVersions={this.workflowVersions}\n      />\n    </div>\n  };\n\n  private onSelectedTabIndexChanged = (e: CustomEvent<TabChangedArgs>) => this.selectedTabIndex = e.detail.selectedTabIndex;\n\n  private onPropertyEditorChanged = (apply: (w: WorkflowDefinition) => void) => {\n    const workflowDefinition = this.workflowDefinition;\n    apply(workflowDefinition);\n    this.workflowPropsUpdated.emit({workflowDefinition: workflowDefinition});\n  }\n\n  private onVariablesUpdated = async (e: CustomEvent<Array<Variable>>) => this.onPropsUpdated('variables', e.detail)\n\n  private onInputsUpdated = async (e: CustomEvent<Array<InputDefinition>>) => this.onPropsUpdated('inputs', e.detail)\n  private onOutputsUpdated = async (e: CustomEvent<Array<OutputDefinition>>) => this.onPropsUpdated('outputs', e.detail)\n\n  private onOutcomesUpdated = async (e: CustomEvent<Array<string>>) => this.onPropsUpdated('outcomes', e.detail)\n\n  private onPropsUpdated = async (\n    propName: string,\n    propValue: Array<Variable> | Array<InputDefinition> | Array<OutputDefinition> | Array<string>\n  ) => {\n    const workflowDefinition = this.workflowDefinition;\n\n    if (!workflowDefinition || !workflowDefinition.isLatest) {\n      console.debug('onPropsUpdated: workflowDefinition is not latest');\n      return;\n    }\n\n    workflowDefinition[propName] = propValue;\n    const updatedTab = this.getPropEditorSectionByPropName(propName);\n    this.workflowPropsUpdated.emit({workflowDefinition, updatedTab});\n    await this.createModel();\n  };\n\n  private onWorkflowDefinitionUpdated = () => {\n    const workflowDefinition = this.workflowDefinition;\n    this.workflowPropsUpdated.emit({workflowDefinition});\n  };\n\n  private getPropEditorSectionByPropName(propName: string): WorkflowPropertiesEditorTabs {\n    const enumKey = Object.keys(WorkflowPropertiesEditorTabs).find(key => WorkflowPropertiesEditorTabs[key as keyof typeof WorkflowPropertiesEditorTabs] === propName);\n\n    if (enumKey) {\n      return WorkflowPropertiesEditorTabs[enumKey as keyof typeof WorkflowPropertiesEditorTabs];\n    }\n    return null;\n  }\n}\n"],"mappings":"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"}