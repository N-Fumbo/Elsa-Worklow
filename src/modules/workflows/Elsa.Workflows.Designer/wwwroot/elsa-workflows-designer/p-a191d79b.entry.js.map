{"version":3,"names":["ProviderCheckList","this","onSelectedProvidersChanged","e","selectedProviderTypes","detail","selectList","items","map","x","Object","assign","selected","includes","value","workflowDefinition","customProperties","WorkflowContextProviderTypesKey","workflowDefinitionChanged","emit","async","_a","selectListItems","descriptors","text","name","type","render","h","FormEntry","label","fieldId","hint","selectedValues","onSelectedValuesChanged"],"sources":["./src/modules/workflow-contexts/components/provider-check-list.tsx"],"sourcesContent":["import {Component, EventEmitter, h, Prop, State, Event} from '@stencil/core';\nimport {FormEntry} from \"../../../components/shared/forms/form-entry\";\nimport {SelectList, Type} from \"../../../models\";\nimport {WorkflowContextProviderDescriptor} from \"../services/api\";\nimport {WorkflowDefinition} from \"../../workflow-definitions/models/entities\";\nimport {WorkflowContextProviderTypesKey} from \"../constants\";\n\n@Component({\n  tag: 'elsa-workflow-context-provider-check-list',\n  shadow: false\n})\nexport class ProviderCheckList {\n  @Prop() descriptors: Array<WorkflowContextProviderDescriptor> = [];\n  @Prop() workflowDefinition: WorkflowDefinition;\n  @Event() workflowDefinitionChanged: EventEmitter<WorkflowDefinition>;\n  @State() selectList: SelectList = {items: []};\n  @State() selectedProviderTypes: Array<Type> = [];\n\n  public async componentWillLoad() {\n    const workflowDefinition = this.workflowDefinition;\n    const selectedProviderTypes: Array<Type> = workflowDefinition?.customProperties[WorkflowContextProviderTypesKey] ?? [];\n    const selectListItems = this.descriptors.map(x => ({text: x.name, value: x.type}));\n\n    this.selectList = {\n      items: selectListItems\n    };\n\n    this.selectedProviderTypes = selectedProviderTypes;\n  }\n\n  render() {\n    const selectList = this.selectList;\n\n    return <FormEntry label=\"Active providers\" fieldId=\"EnabledProviders\" hint=\"Select the providers to activate for this workflow.\">\n      <elsa-check-list selectList={selectList} selectedValues={this.selectedProviderTypes} onSelectedValuesChanged={this.onSelectedProvidersChanged}></elsa-check-list>\n    </FormEntry>\n  }\n\n  private onSelectedProvidersChanged = (e: CustomEvent<Array<string> | number>) => {\n    const selectedProviderTypes = e.detail as Array<string>;\n    this.selectList = {items: this.selectList.items.map(x => ({...x, selected: selectedProviderTypes.includes(x.value)}))};\n    this.workflowDefinition.customProperties[WorkflowContextProviderTypesKey] = selectedProviderTypes;\n    this.workflowDefinitionChanged.emit(this.workflowDefinition);\n  };\n}\n"],"mappings":"wJAWaA,EAAiB,M,8FA2BpBC,KAAAC,2BAA8BC,IACpC,MAAMC,EAAwBD,EAAEE,OAChCJ,KAAKK,WAAa,CAACC,MAAON,KAAKK,WAAWC,MAAMC,KAAIC,GAACC,OAAAC,OAAAD,OAAAC,OAAA,GAASF,GAAC,CAAEG,SAAUR,EAAsBS,SAASJ,EAAEK,YAC5Gb,KAAKc,mBAAmBC,iBAAiBC,GAAmCb,EAC5EH,KAAKiB,0BAA0BC,KAAKlB,KAAKc,mBAAmB,E,iBA9BE,G,kDAG9B,CAACR,MAAO,I,2BACI,E,CAEvCa,0B,MACL,MAAML,EAAqBd,KAAKc,mBAChC,MAAMX,GAAqCiB,EAAAN,IAAkB,MAAlBA,SAAkB,SAAlBA,EAAoBC,iBAAiBC,MAAgC,MAAAI,SAAA,EAAAA,EAAI,GACpH,MAAMC,EAAkBrB,KAAKsB,YAAYf,KAAIC,IAAC,CAAMe,KAAMf,EAAEgB,KAAMX,MAAOL,EAAEiB,SAE3EzB,KAAKK,WAAa,CAChBC,MAAOe,GAGTrB,KAAKG,sBAAwBA,C,CAG/BuB,SACE,MAAMrB,EAAaL,KAAKK,WAExB,OAAOsB,EAACC,EAAS,CAACC,MAAM,mBAAmBC,QAAQ,mBAAmBC,KAAK,uDACzEJ,EAAA,mBAAiBtB,WAAYA,EAAY2B,eAAgBhC,KAAKG,sBAAuB8B,wBAAyBjC,KAAKC,6B"}