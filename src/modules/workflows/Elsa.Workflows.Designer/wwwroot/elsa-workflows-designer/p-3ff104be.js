async function n(t,n=null){t.classList.remove("hidden"),await a("enter",t,n)}async function t(t,n=null){await a("leave",t,n),t.classList.add("hidden")}async function e(a,i=null){a.classList.contains("hidden")?await n(a,i):await t(a,i)}async function a(t,n,a){const e=n.dataset,r=a?`${a}-${t}`:t;let l=`transition${t.charAt(0).toUpperCase()+t.slice(1)}`;const u=e[l]?e[l].split(" "):[r],d=e[`${l}Start`]?e[`${l}Start`].split(" "):[`${r}-start`],m=e[`${l}End`]?e[`${l}End`].split(" "):[`${r}-end`];i(n,u),i(n,d),await s(),o(n,d),i(n,m),await c(n),o(n,m),o(n,u)}function i(t,n){t.classList.add(...n)}function o(t,n){t.classList.remove(...n)}function s(){return new Promise((t=>{requestAnimationFrame((()=>{requestAnimationFrame(t)}))}))}function c(t){return new Promise((n=>{const a=getComputedStyle(t).transitionDuration.split(",")[0],i=1e3*Number(a.replace("s",""));setTimeout((()=>{n()}),i)}))}export{n as e,t as l,e as t};