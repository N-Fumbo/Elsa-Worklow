{"version":3,"names":["CheckList","this","selectList","items","isFlagsEnum","getSelectedValues","inputContext","inputDescriptor","input","getInputPropertyValue","defaultValue","json","getValueOrDefault","_a","expression","value","parsedValue","parseInt","getObjectOrParseJson","length","onCheckChanged","e","checkbox","target","checked","isFlags","newValue","selectedValue","toString","selectedValues","uniq","filter","x","JSON","stringify","inputChanged","SyntaxNames","Object","onExpressionChanged","detail","syntax","async","getSelectListItems","Array","isArray","parse","render","fieldName","name","fieldId","displayName","hint","description","_c","_b","type","defaultSyntax","h","label","class","map","item","index","inputId","optionIsString","text","isSelected","findIndex","id","onChange","htmlFor"],"sources":["./src/components/inputs/check-list.tsx"],"sourcesContent":["import {Component, h, Prop, State} from '@stencil/core';\nimport {uniq} from 'lodash'\nimport {ObjectExpression, SelectList, SyntaxNames} from \"../../models\";\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\nimport {getSelectListItems, getInputPropertyValue, parseJson, getObjectOrParseJson} from \"../../utils\";\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\n\n@Component({\n  tag: 'elsa-check-list-input',\n  shadow: false\n})\nexport class CheckList {\n  private selectList: SelectList = {items: [], isFlagsEnum: false};\n\n  @Prop() public inputContext: ActivityInputContext;\n  @State() private selectedValues?: Array<string> = [];\n  @State() private selectedValue?: number;\n\n  public async componentWillLoad() {\n    this.selectList = await getSelectListItems(this.inputContext.inputDescriptor);\n    const selectedValues = this.getSelectedValues(this.selectList);\n\n    if (Array.isArray(selectedValues))\n      this.selectedValues = selectedValues;\n    else if (typeof (selectedValues) == 'number')\n      this.selectedValue = selectedValues;\n    else if (typeof selectedValues == 'string')\n      this.selectedValues = JSON.parse(selectedValues);\n  }\n\n  public render() {\n    const inputContext = this.inputContext;\n    const inputDescriptor = inputContext.inputDescriptor;\n    const fieldName = inputDescriptor.name;\n    const fieldId = inputDescriptor.name;\n    const displayName = inputDescriptor.displayName;\n    const hint = inputDescriptor.description;\n    const input = getInputPropertyValue(inputContext);\n    const value = (input?.expression as ObjectExpression)?.value; // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\n    const selectList = this.selectList;\n\n    return (\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\n        <div class=\"tw-max-w-lg tw-space-y-4 tw-my-4\">\n          {selectList.items.map((item, index) => {\n            const inputId = `${fieldId}_${index}`;\n            const optionIsString = typeof (item as any) == 'string';\n            const value = optionIsString ? item : item.value;\n            const text = optionIsString ? item : item.text;\n            const isSelected = selectList.isFlagsEnum\n              ? (this.selectedValue & (parseInt(value as string))) == parseInt(value as string)\n              : this.selectedValues.findIndex(x => x == value) >= 0;\n\n            return (\n              <div class=\"tw-relative tw-flex tw-items-start\">\n                <div class=\"tw-flex tw-items-center tw-h-5\">\n                  <input id={inputId} type=\"checkbox\" name={fieldName} checked={isSelected} value={value}\n                         onChange={e => this.onCheckChanged(e)}\n                         class=\"focus:tw-ring-blue-500 tw-h-4 tw-w-4 tw-text-blue-600 tw-border-gray-300 tw-rounded\"/>\n                </div>\n                <div class=\"tw-ml-3 tw-text-sm\">\n                  <label htmlFor={inputId} class=\"tw-font-medium tw-text-gray-700\">{text}</label>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </elsa-input-control-switch>\n    );\n  }\n\n  private getSelectedValues = (selectList: SelectList): number | Array<string> => {\n    const inputContext = this.inputContext;\n    const inputDescriptor = inputContext.inputDescriptor;\n    const input = getInputPropertyValue(this.inputContext);\n    const defaultValue = inputDescriptor.defaultValue;\n    const json = this.getValueOrDefault(input?.expression?.value, defaultValue);\n    let parsedValue = selectList.isFlagsEnum ? parseInt(json) : getObjectOrParseJson(json) || [];\n\n    if (parsedValue.length == 0)\n      parsedValue = getObjectOrParseJson(defaultValue) || [];\n\n    return parsedValue;\n  };\n\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\n    return value ?? defaultValue ?? '';\n  }\n\n  private onCheckChanged = (e: Event) => {\n    const checkbox = (e.target as HTMLInputElement);\n    const checked = checkbox.checked;\n    const value = checkbox.value;\n    const isFlags = this.selectList.isFlagsEnum;\n    let json = '[]';\n\n    if (isFlags) {\n      let newValue = this.selectedValue;\n\n      if (checked)\n        newValue = newValue | parseInt(value);\n      else\n        newValue = newValue & ~parseInt(value);\n\n      this.selectedValue = newValue;\n      json = newValue.toString();\n    } else {\n      let newValue = this.selectedValues;\n\n      if (checked)\n        newValue = uniq([...newValue, value]);\n      else\n        newValue = newValue.filter(x => x !== value);\n\n      this.selectedValues = newValue;\n      json = JSON.stringify(newValue);\n    }\n\n    this.inputContext.inputChanged(json, SyntaxNames.Object);\n  }\n\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\n  }\n}\n"],"mappings":"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"}