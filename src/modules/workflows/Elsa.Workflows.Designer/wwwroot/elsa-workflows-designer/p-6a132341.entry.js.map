{"version":3,"names":["VariablePickerInput","this","workflowDefinitions","onChange","e","inputElement","target","definitionId","value","inputContext","inputChanged","SyntaxNames","Literal","async","apiClient","Container","get","WorkflowDefinitionsApi","response","list","versionOptions","isPublished","orderBy","WorkflowDefinitionsOrderBy","Name","items","render","inputDescriptor","fieldName","name","fieldId","displayName","description","getPropertyValue","currentValue","_a","expression","h","FormEntry","label","hint","id","map","definition","isSelected","selected"],"sources":["./src/modules/workflow-definitions/components/inputs/workflow-definition-picker.tsx"],"sourcesContent":["import {Component, h, Prop} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {WorkflowDefinitionSummary} from \"../../models/entities\";\nimport {ActivityInputContext} from \"../../../../services/activity-input-driver\";\nimport {getPropertyValue} from \"../../../../utils\";\nimport {ActivityInput, Expression, SyntaxNames} from \"../../../../models\";\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {WorkflowDefinitionsApi, WorkflowDefinitionsOrderBy} from \"../../services/api\";\n\n@Component({\n  tag: 'elsa-workflow-definition-picker-input',\n  shadow: false\n})\nexport class VariablePickerInput {\n  @Prop() inputContext: ActivityInputContext;\n  private workflowDefinitions: Array<WorkflowDefinitionSummary> = [];\n\n  async componentWillLoad() {\n    const apiClient = Container.get(WorkflowDefinitionsApi);\n    const response = await apiClient.list({versionOptions: {isPublished: true}, orderBy: WorkflowDefinitionsOrderBy.Name});\n    this.workflowDefinitions = response.items;\n  }\n\n  public render() {\n    const inputContext = this.inputContext;\n    const inputDescriptor = inputContext.inputDescriptor;\n    const fieldName = inputDescriptor.name;\n    const fieldId = inputDescriptor.name;\n    const displayName = inputDescriptor.displayName;\n    const description = inputDescriptor.description;\n    const workflowDefinitions = this.workflowDefinitions;\n    const value = getPropertyValue(inputContext) as ActivityInput;\n    const currentValue = value?.expression?.value;\n\n    return (\n      <FormEntry fieldId={fieldId} label={displayName} hint={description}>\n        <select id={fieldId} name={fieldName} onChange={e => this.onChange(e)}>\n          {workflowDefinitions.map((definition: WorkflowDefinitionSummary) => {\n            const definitionId = definition.definitionId;\n            const isSelected = definitionId == currentValue;\n            return <option value={definitionId} selected={isSelected}>{definition.name}</option>;\n          })}\n        </select>\n      </FormEntry>\n    );\n  }\n\n  private onChange = (e: Event) => {\n    const inputElement = e.target as HTMLSelectElement;\n    const definitionId = inputElement.value;\n    this.inputContext.inputChanged(definitionId, SyntaxNames.Literal);\n  }\n}\n"],"mappings":"6TAaaA,EAAmB,M,yBAEtBC,KAAAC,oBAAwD,GAgCxDD,KAAAE,SAAYC,IAClB,MAAMC,EAAeD,EAAEE,OACvB,MAAMC,EAAeF,EAAaG,MAClCP,KAAKQ,aAAaC,aAAaH,EAAcI,EAAYC,QAAQ,E,4BAjCnEC,0BACE,MAAMC,EAAYC,EAAUC,IAAIC,GAChC,MAAMC,QAAiBJ,EAAUK,KAAK,CAACC,eAAgB,CAACC,YAAa,MAAOC,QAASC,EAA2BC,OAChHvB,KAAKC,oBAAsBgB,EAASO,K,CAG/BC,S,MACL,MAAMjB,EAAeR,KAAKQ,aAC1B,MAAMkB,EAAkBlB,EAAakB,gBACrC,MAAMC,EAAYD,EAAgBE,KAClC,MAAMC,EAAUH,EAAgBE,KAChC,MAAME,EAAcJ,EAAgBI,YACpC,MAAMC,EAAcL,EAAgBK,YACpC,MAAM9B,EAAsBD,KAAKC,oBACjC,MAAMM,EAAQyB,EAAiBxB,GAC/B,MAAMyB,GAAeC,EAAA3B,IAAK,MAALA,SAAK,SAALA,EAAO4B,cAAU,MAAAD,SAAA,SAAAA,EAAE3B,MAExC,OACE6B,EAACC,EAAS,CAACR,QAASA,EAASS,MAAOR,EAAaS,KAAMR,GACrDK,EAAA,UAAQI,GAAIX,EAASD,KAAMD,EAAWzB,SAAUC,GAAKH,KAAKE,SAASC,IAChEF,EAAoBwC,KAAKC,IACxB,MAAMpC,EAAeoC,EAAWpC,aAChC,MAAMqC,EAAarC,GAAgB2B,EACnC,OAAOG,EAAA,UAAQ7B,MAAOD,EAAcsC,SAAUD,GAAaD,EAAWd,KAAc,K"}