{"version":3,"names":["RevertIcon","h","class","width","height","viewBox","xmlns","fill","stroke","d","PublishedIcon","ActivityInputEditorDialogContent","this","onSubmit","async","e","preventDefault","form","target","input","getInputInternal","inputChanged","emit","formData","FormData","name","get","displayName","type","description","category","uiHint","isArray","driverType","storageDriverType","isNullOrWhitespace","formElement","render","_a","inputTypeName","availableTypes","descriptorsStore","variableDescriptors","storageDrivers","groupedTypes","groupBy","x","selectedUIHint","uiHints","value","ref","el","method","FormEntry","fieldId","label","hint","id","Object","keys","map","types","descriptor","typeName","selected","CheckboxFormEntry","checked","isSelected","driver","text","ActivityOutputEditorDialogContent","output","getOutputInternal","outputChanged","outputTypeName","VariableEditorDialogContent","variable","getVariableInternal","variableChanged","driverTypeName","generateIdentity","storageDriverTypeName","variableTypeName","groupedVariableTypes","variableTypes","VariablesEditor","constructor","hostRef","getVariableNameExists","variables","find","updateVariablesState","variablesState","variablesChanged","generateNewVariableName","counter","length","newVariableName","onAddVariableClick","modalDialogInstance","modalDialogService","show","actions","saveAction","onEditClick","onDeleteClick","filter","onVariableChanged","a","updatedVariable","instance","modalDialogContentRef","getVariable","variableExists","sort","b","Container","ModalDialogService","ModalActionType","Submit","isPrimary","onClick","onVariablesPropChanged","componentWillLoad","scope","storage","storageName","typeDisplayName","_b","menuItems","handler","icon","EditIcon","DeleteIcon","Widgets","widgets","order","widget","content","InputOutputSettings","renderInputs","inputs","inputsState","onEditInputClick","onDeleteInputClick","onAddInputClick","renderOutputs","outputs","outputsState","onEditOutputClick","onDeleteOutputClick","onAddOutputClick","renderOutcomes","outcomes","placeHolder","values","onValueChanged","onOutcomesChanged","detail","getInputNameExists","getOutputNameExists","updateInputsState","inputsChanged","updateOutputsState","outputsChanged","generateNewInputName","newName","generateNewOutputName","inputSaveAction","outputSaveAction","onInputDefinitionChanged","updatedInput","getInput","inputExists","onOutputDefinitionChanged","updatedOutput","getOutput","outputExists","outcomesChanged","onInputsPropChanged","onOutputsPropChanged","WorkflowDefinitionVersionHistory","onViewVersionClick","version","versionSelected","onDeleteVersionClick","DefaultContents","Warning","modalType","ModalType","Confirmation","DefaultModalActions","Delete","deleteVersionClicked","Cancel","onRevertVersionClick","revertVersionClicked","eventBus","EventBus","workflowDefinitionApi","WorkflowDefinitionsApi","workflowVersions","v","push","isLatest","isPublished","moment","createdAt","format","disabled","selectedVersion","undefined"],"sources":["./src/components/icons/tooling/revert.tsx","./src/components/icons/tooling/published.tsx","./src/modules/workflow-definitions/components/workflow-properties/activity-input-editor-dialog-content.tsx","./src/modules/workflow-definitions/components/workflow-properties/activity-output-editor-dialog-content.tsx","./src/modules/workflow-definitions/components/workflow-properties/variable-editor-dialog-content.tsx","./src/modules/workflow-definitions/components/workflow-properties/variables-editor.tsx","./src/modules/workflow-definitions/components/widgets.tsx","./src/modules/workflow-definitions/components/workflow-properties/input-output-settings.tsx","./src/modules/workflow-definitions/components/workflow-properties/version-history.tsx"],"sourcesContent":["import {FunctionalComponent, h} from \"@stencil/core\";\n\nexport const RevertIcon: FunctionalComponent = () =>\n  <svg class=\"tw-h-6 tw-w-6 tw-text-gray-500\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n       stroke-linejoin=\"round\">\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\n    <path d=\"M9 11l-4 4l4 4m-4 -4h11a4 4 0 0 0 0 -8h-1\"/>\n  </svg>;\n","import {FunctionalComponent, h} from \"@stencil/core\";\n\nexport const PublishedIcon: FunctionalComponent = () =>\n  <svg class=\"tw-h-6 tw-w-6 tw-text-blue-500\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n       stroke-linejoin=\"round\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n  </svg>;\n","import {Component, h, Prop, Event, EventEmitter, Method} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {InputDefinition} from \"../../models/entities\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\nimport {StorageDriverDescriptor} from \"../../../../models\";\nimport {isNullOrWhitespace} from \"../../../../utils\";\n\n@Component({\n  tag: 'elsa-activity-input-editor-dialog-content',\n  shadow: false\n})\nexport class ActivityInputEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() input: InputDefinition;\n  @Event() inputChanged: EventEmitter<InputDefinition>;\n\n  @Method()\n  async getInput(): Promise<InputDefinition> {\n    return this.getInputInternal(this.formElement);\n  }\n\n  render() {\n    const input: InputDefinition = this.input ?? {name: '', type: 'Object', isArray: false};\n    const inputTypeName = input.type;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n    const groupedTypes = groupBy(availableTypes, x => x.category);\n    const selectedUIHint = input.uiHint;\n\n    // TODO: Get this from configuration (API).\n    const uiHints = [{\n      name: 'Single line',\n      value: 'single-line'\n    }, {\n      name: 'Multi line',\n      value: 'multi-line'\n    }, {\n      name: 'Checkbox',\n      value: 'checkbox'\n    }, {\n      name: 'Check list',\n      value: 'check-list'\n    }, {\n      name: 'Radio list',\n      value: 'radio-list'\n    }, {\n      name: 'Dropdown',\n      value: 'dropdown'\n    }, {\n      name: 'Multi text',\n      value: 'multi-text'\n    }, {\n      name: 'Code editor',\n      value: 'code-editor'\n    }, {\n      name: 'Variable picker',\n      value: 'variable-picker'\n    }, {\n      name: 'Type picker',\n      value: 'type-picker'\n    }\n    ];\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">Edit input definition</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"inputName\" label=\"Name\" hint=\"The technical name of the input.\">\n                <input type=\"text\" name=\"inputName\" id=\"inputName\" value={input.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputTypeName\" label=\"Type\" hint=\"The type of the input.\">\n                <select id=\"inputTypeName\" name=\"inputTypeName\">\n                  {Object.keys(groupedTypes).map(category => {\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == inputTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <CheckboxFormEntry fieldId=\"inputIsArray\" label=\"This input is an array\" hint=\"Check if the input holds an array of the selected type.\">\n                <input type=\"checkbox\" name=\"inputIsArray\" id=\"inputIsArray\" value=\"true\" checked={input.isArray}/>\n              </CheckboxFormEntry>\n\n              <FormEntry fieldId=\"inputDisplayName\" label=\"Display name\" hint=\"The user friendly display name of the input.\">\n                <input type=\"text\" name=\"inputDisplayName\" id=\"inputDisplayName\" value={input.displayName}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputDescription\" label=\"Description\" hint=\"A description of the input.\">\n                <input type=\"text\" name=\"inputDescription\" id=\"inputDescription\" value={input.description}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputCategory\" label=\"Category\" hint=\"A custom category.\">\n                <input type=\"text\" name=\"inputCategory\" id=\"inputCategory\" value={input.category}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputUIHint\" label=\"Control\" hint=\"The control to use for this input.\">\n                <select name=\"inputUIHint\" id=\"inputUIHint\">\n                  {uiHints.map(uiHint => {\n                    const isSelected = uiHint.value == selectedUIHint;\n                    return <option value={uiHint.value} selected={isSelected}>{uiHint.name}</option>\n                  })}\n                </select>\n              </FormEntry>\n\n              <FormEntry fieldId=\"inputStorageDriverType\" label=\"Storage\" hint=\"The storage to use when persisting the input.\">\n                <select id=\"inputStorageDriverType\" name=\"inputStorageDriverType\">\n                  {storageDrivers.map(driver => {\n                    const value = driver.typeName;\n                    const text = driver.displayName;\n                    const selected = value == input.storageDriverType;\n                    return <option value={value} selected={selected}>{text}</option>;\n                  })}\n                </select>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const input = this.getInputInternal(form);\n    this.inputChanged.emit(input);\n  };\n\n  private getInputInternal = (form: HTMLFormElement): InputDefinition => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('inputName') as string;\n    const displayName = formData.get('inputDisplayName') as string;\n    const type = formData.get('inputTypeName') as string;\n    const description = formData.get('inputDescription') as string;\n    const category = formData.get('inputCategory') as string;\n    const uiHint = formData.get('inputUIHint') as string;\n    const isArray = formData.get('inputIsArray') as string === 'true';\n    const driverType = formData.get('inputStorageDriverType') as string;\n    const input = this.input;\n\n    input.name = name;\n    input.type = type;\n    input.displayName = displayName;\n    input.category = category;\n    input.description = description;\n    input.uiHint = uiHint;\n    input.isArray = isArray;\n    input.storageDriverType = isNullOrWhitespace(driverType) ? null : driverType;\n\n    return input;\n  };\n\n}\n","import {Component, h, Prop, Event, EventEmitter, Method} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {InputDefinition, OutputDefinition} from \"../../models/entities\";\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\n\n@Component({\n  tag: 'elsa-activity-output-editor-dialog-content',\n  shadow: false\n})\nexport class ActivityOutputEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() output: OutputDefinition;\n  @Event() outputChanged: EventEmitter<OutputDefinition>;\n\n  @Method()\n  async getOutput(): Promise<OutputDefinition> {\n    return this.getOutputInternal(this.formElement);\n  }\n\n  render() {\n    const output: OutputDefinition = this.output ?? {name: '', type: 'Object', isArray: false};\n    const outputTypeName = output.type;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const groupedTypes = groupBy(availableTypes, x => x.category);\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">Edit output definition</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"outputName\" label=\"Name\" hint=\"The technical name of the output.\">\n                <input type=\"text\" name=\"outputName\" id=\"outputName\" value={output.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputTypeName\" label=\"Type\" hint=\"The type of the output.\">\n                <select id=\"outputTypeName\" name=\"outputTypeName\">\n                  {Object.keys(groupedTypes).map(category => {\n                    const types = groupedTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {types.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == outputTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputDisplayName\" label=\"Display name\" hint=\"The user friendly display name of the output.\">\n                <input type=\"text\" name=\"outputDisplayName\" id=\"outputDisplayName\" value={output.displayName}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"outputDescription\" label=\"Description\" hint=\"A description of the output.\">\n                <input type=\"text\" name=\"outputDescription\" id=\"outputDescription\" value={output.description}/>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const output = this.getOutputInternal(form);\n    this.outputChanged.emit(output);\n  };\n\n  private getOutputInternal = (form: HTMLFormElement): OutputDefinition => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('outputName') as string;\n    const displayName = formData.get('outputDisplayName') as string;\n    const type = formData.get('outputTypeName') as string;\n    const description = formData.get('outputDescription') as string;\n    const output = this.output;\n\n    output.name = name;\n    output.type = type;\n    output.displayName = displayName;\n    output.description = description;\n\n    return output;\n  };\n\n}\n","import {Component, h, Prop, Event, EventEmitter, Method} from \"@stencil/core\";\nimport {groupBy} from 'lodash';\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\nimport {generateIdentity, isNullOrWhitespace} from \"../../../../utils\";\nimport descriptorsStore from '../../../../data/descriptors-store';\nimport {VariableDescriptor} from \"../../../../services/api-client/variable-descriptors-api\";\nimport {CheckboxFormEntry, FormEntry} from \"../../../../components/shared/forms/form-entry\";\n\n@Component({\n  tag: 'elsa-variable-editor-dialog-content',\n  shadow: false\n})\nexport class VariableEditorDialogContent {\n  private formElement: HTMLFormElement;\n\n  @Prop() variable: Variable;\n  @Event() variableChanged: EventEmitter<Variable>;\n\n  @Method()\n  async getVariable(): Promise<Variable> {\n    return this.getVariableInternal(this.formElement);\n  }\n\n  render() {\n    const variable: Variable = this.variable ?? {id: '', name: '', typeName: 'Object', isArray: false};\n    const variableTypeName = variable.typeName;\n    const availableTypes: Array<VariableDescriptor> = descriptorsStore.variableDescriptors;\n    const groupedVariableTypes = groupBy(availableTypes, x => x.category);\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <form ref={el => this.formElement = el} class=\"tw-h-full tw-flex tw-flex-col tw-bg-white\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n          <div class=\"tw-pt-4\">\n            <h2 class=\"tw-text-lg tw-font-medium tw-ml-4 tw-mb-2\">Edit Variable</h2>\n            <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n\n              <FormEntry fieldId=\"variableName\" label=\"Name\" hint=\"The technical name of the variable.\">\n                <input type=\"text\" name=\"variableName\" id=\"variableName\" value={variable.name}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"variableTypeName\" label=\"Type\" hint=\"The type of the variable.\">\n                <select id=\"variableTypeName\" name=\"variableTypeName\">\n                  {Object.keys(groupedVariableTypes).map(category => {\n                    const variableTypes = groupedVariableTypes[category] as Array<VariableDescriptor>;\n                    return (<optgroup label={category}>\n                      {variableTypes.map(descriptor => <option value={descriptor.typeName} selected={descriptor.typeName == variableTypeName}>{descriptor.displayName}</option>)}\n                    </optgroup>);\n                  })}\n                </select>\n              </FormEntry>\n\n              <CheckboxFormEntry fieldId=\"variableIsArray\" label=\"This variable is an array\" hint=\"Check if the variable holds an array of the selected type.\">\n                <input type=\"checkbox\" name=\"variableIsArray\" id=\"variableIsArray\" value=\"true\" checked={variable.isArray}/>\n              </CheckboxFormEntry>\n\n              <FormEntry fieldId=\"variableValue\" label=\"Value\" hint=\"The value of the variable.\">\n                <input type=\"text\" name=\"variableValue\" id=\"variableValue\" value={variable.value}/>\n              </FormEntry>\n\n              <FormEntry fieldId=\"variableStorageDriverId\" label=\"Storage\" hint=\"The storage to use when persisting the variable.\">\n                <select id=\"variableStorageDriverTypeName\" name=\"variableStorageDriverTypeName\">\n                  {storageDrivers.map(driver => {\n                    const value = driver.typeName;\n                    const text = driver.displayName;\n                    const selected = value == variable.storageDriverTypeName;\n                    return <option value={value} selected={selected}>{text}</option>;\n                  })}\n                </select>\n              </FormEntry>\n\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private onSubmit = async (e: Event) => {\n    e.preventDefault();\n    const form = e.target as HTMLFormElement;\n    const variable = this.getVariableInternal(form);\n    this.variableChanged.emit(variable);\n  };\n\n  private getVariableInternal = (form: HTMLFormElement): Variable => {\n    const formData = new FormData(form as HTMLFormElement);\n    const name = formData.get('variableName') as string;\n    const value = formData.get('variableValue') as string;\n    const type = formData.get('variableTypeName') as string;\n    const isArray = formData.get('variableIsArray') as string == 'true';\n    const driverTypeName = formData.get('variableStorageDriverTypeName') as string;\n    const variable = this.variable;\n\n    if (isNullOrWhitespace(variable.id))\n      variable.id = generateIdentity();\n\n    variable.name = name;\n    variable.typeName = type;\n    variable.value = value;\n    variable.isArray = isArray;\n    variable.storageDriverTypeName = isNullOrWhitespace(driverTypeName) ? null : driverTypeName;\n\n    return variable;\n  };\n\n}\n","import {Component, Event, EventEmitter, h, Prop, State, Watch} from \"@stencil/core\";\nimport {StorageDriverDescriptor, Variable} from \"../../../../models\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {Container} from \"typedi\";\nimport {ModalActionClickArgs, ModalActionDefinition, ModalActionType, ModalDialogInstance, ModalDialogService} from \"../../../../components/shared/modal-dialog\";\nimport {DeleteIcon, EditIcon} from \"../../../../components/icons/tooling\";\n\n@Component({\n  tag: 'elsa-variables-editor',\n  shadow: false\n})\nexport class VariablesEditor {\n  private readonly modalDialogService: ModalDialogService;\n  private readonly saveAction: ModalActionDefinition;\n  private modalDialogInstance: ModalDialogInstance;\n\n  constructor() {\n    this.modalDialogService = Container.get(ModalDialogService);\n\n    this.saveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onVariableChanged\n    };\n  }\n\n  @Prop() variables?: Array<Variable>;\n  @Event() variablesChanged: EventEmitter<Variable[]>;\n  @State() variablesState: Array<Variable> = [];\n\n  @Watch('variables')\n  onVariablesPropChanged(value: Array<Variable>) {\n    this.variablesState = !!this.variables ? [...this.variables] : [];\n  }\n\n  componentWillLoad() {\n    this.onVariablesPropChanged(this.variables);\n  }\n\n  render() {\n    const variables = this.variables;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <div class=\"tw-flex tw-justify-end tw-m-4\">\n          <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddVariableClick()}>Add variable</button>\n        </div>\n        <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n          <table class=\"default-table\">\n            <thead>\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Type</th>\n              <th scope=\"col\">Storage</th>\n              <th scope=\"col\"/>\n            </tr>\n            </thead>\n            <tbody>\n            {variables.map(variable => {\n                const storage = storageDrivers.find(x => x.typeName == variable.storageDriverTypeName);\n                const storageName = storage?.displayName ?? '-';\n                const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == variable.typeName);\n                const typeDisplayName = descriptor?.displayName ?? variable.typeName;\n\n                return (\n                  <tr>\n                    <td class=\"tw-whitespace-nowrap\">{variable.name}</td>\n                    <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                    <td>{storageName}</td>\n                    <td class=\"tw-pr-6\">\n                      <elsa-context-menu\n                        menuItems={[\n                          {text: 'Edit', handler: e => this.onEditClick(e, variable), icon: <EditIcon/>},\n                          {text: 'Delete', handler: e => this.onDeleteClick(e, variable), icon: <DeleteIcon/>},\n                        ]}\n                      />\n                    </td>\n                  </tr>);\n              }\n            )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private getVariableNameExists = (name: string): boolean => !!this.variables.find(x => x.name == name);\n\n  private updateVariablesState = (value: Array<Variable>) => {\n    this.variablesState = value;\n    this.variablesChanged.emit(value);\n  };\n\n  private generateNewVariableName = () => {\n    const variables = this.variables;\n    let counter = variables.length;\n\n    while (true) {\n      const newVariableName = `Variable${++counter}`;\n\n      if (!this.getVariableNameExists(newVariableName))\n        return newVariableName;\n    }\n  };\n\n  private onAddVariableClick = async () => {\n    const newVariableName = this.generateNewVariableName();\n    const variable: Variable = {id: '', name: newVariableName, typeName: 'Object', value: null, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]})\n  };\n\n  private onEditClick = async (e: Event, variable: Variable) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-variable-editor-dialog-content variable={variable}/>, {actions: [this.saveAction]});\n  };\n\n  private onDeleteClick = (e: Event, variable: Variable) => {\n    e.preventDefault();\n    const variables = this.variables.filter(x => x != variable);\n    this.updateVariablesState(variables);\n  };\n\n  private onVariableChanged = async (a: ModalActionClickArgs) => {\n    const updatedVariable = await (a.instance.modalDialogContentRef as HTMLElsaVariableEditorDialogContentElement).getVariable();\n    let variables = this.variables;\n    const variableExists = !!variables.find(x => x == updatedVariable);\n\n    if (variableExists)\n      variables = [...variables];\n    else\n      variables = [...variables, updatedVariable];\n\n    variables = variables.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateVariablesState(variables);\n  };\n}\n","import {Component, Event, EventEmitter, h, Method, Prop, State, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../services\";\nimport {WorkflowDefinition} from \"../models/entities\";\nimport {PropertiesTabModel, TabModel, Widget, WorkflowDefinitionPropsUpdatedArgs, WorkflowPropertiesEditorDisplayingArgs, WorkflowPropertiesEditorEventTypes, WorkflowPropertiesEditorModel} from \"../models/ui\";\nimport {FormEntry} from \"../../../components/shared/forms/form-entry\";\nimport {isNullOrWhitespace} from \"../../../utils\";\nimport {InfoList} from \"../../../components/shared/forms/info-list\";\nimport {TabChangedArgs, Variable, VersionedEntity} from \"../../../models\";\nimport {WorkflowDefinitionsApi} from \"../services/api\";\n\n@Component({\n  tag: 'elsa-widgets',\n})\nexport class Widgets {\n  @Prop() widgets: Array<Widget> = [];\n\n  public render() {\n    const widgets = this.widgets.sort((a, b) => a.order < b.order ? -1 : a.order > b.order ? 1 : 0);\n\n    return <div>\n      {widgets.map(widget => widget.content())}\n    </div>\n  }\n}\n","import {Component, Event, EventEmitter, h, Prop, State, Watch} from \"@stencil/core\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {Container} from \"typedi\";\nimport {ModalActionClickArgs, ModalActionDefinition, ModalActionType, ModalDialogInstance, ModalDialogService} from \"../../../../components/shared/modal-dialog\";\nimport {InputDefinition, OutputDefinition} from \"../../models/entities\";\nimport {DeleteIcon, EditIcon} from \"../../../../components/icons/tooling\";\nimport {FormEntry} from \"../../../../components/shared/forms/form-entry\";\n\n@Component({\n  tag: 'elsa-workflow-definition-input-output-settings',\n  shadow: false\n})\nexport class InputOutputSettings {\n  private readonly modalDialogService: ModalDialogService;\n  private readonly inputSaveAction: ModalActionDefinition;\n  private readonly outputSaveAction: ModalActionDefinition;\n  private modalDialogInstance: ModalDialogInstance;\n\n  constructor() {\n    this.modalDialogService = Container.get(ModalDialogService);\n\n    this.inputSaveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onInputDefinitionChanged\n    };\n\n    this.outputSaveAction = {\n      name: 'Save',\n      type: ModalActionType.Submit,\n      text: 'Save',\n      isPrimary: true,\n      onClick: this.onOutputDefinitionChanged\n    };\n  }\n\n  @Prop() inputs?: Array<InputDefinition>;\n  @Prop() outputs?: Array<OutputDefinition>;\n  @Prop() outcomes?: Array<string>;\n  @Event() inputsChanged: EventEmitter<InputDefinition[]>;\n  @Event() outputsChanged: EventEmitter<OutputDefinition[]>;\n  @Event() outcomesChanged: EventEmitter<Array<string>>;\n  @State() inputsState: Array<InputDefinition> = [];\n  @State() outputsState: Array<OutputDefinition> = [];\n\n  @Watch('inputs')\n  onInputsPropChanged(value: Array<InputDefinition>) {\n    this.inputsState = !!this.inputs ? [...this.inputs] : [];\n  }\n\n  @Watch('outputs')\n  onOutputsPropChanged(value: Array<OutputDefinition>) {\n    this.outputsState = !!this.outputs ? [...this.outputs] : [];\n  }\n\n  componentWillLoad() {\n    this.onInputsPropChanged(this.inputs);\n    this.onOutputsPropChanged(this.outputs);\n  }\n\n  render() {\n\n    return (\n      <div>\n        {this.renderInputs()}\n        {this.renderOutputs()}\n        {this.renderOutcomes()}\n      </div>\n    );\n  }\n\n  private renderInputs = () => {\n    const inputs = this.inputsState;\n\n    return <div>\n      <div class=\"tw-p-4\">\n        <h3 class=\"tw-text-base tw-leading-6 tw-font-medium tw-text-gray-900\">Inputs</h3>\n      </div>\n      <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n        <table class=\"default-table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Type</th>\n            <th scope=\"col\"/>\n          </tr>\n          </thead>\n          <tbody>\n          {inputs.map(input => {\n\n              const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == input.type);\n              const typeDisplayName = descriptor?.displayName ?? input.type;\n\n              return (\n                <tr>\n                  <td class=\"tw-whitespace-nowrap\">{input.name}</td>\n                  <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                  <td class=\"tw-pr-6\">\n                    <elsa-context-menu\n                      menuItems={[\n                        {text: 'Edit', handler: e => this.onEditInputClick(e, input), icon: <EditIcon/>},\n                        {text: 'Delete', handler: e => this.onDeleteInputClick(e, input), icon: <DeleteIcon/>},\n                      ]}\n                    />\n                  </td>\n                </tr>);\n            }\n          )}\n          </tbody>\n        </table>\n      </div>\n      <div class=\"tw-flex tw-justify-end tw-m-4\">\n        <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddInputClick()}>Add input parameter</button>\n      </div>\n    </div>\n  };\n\n  private renderOutputs = () => {\n    const outputs = this.outputsState;\n\n    return <div>\n      <div class=\"tw-p-4\">\n        <h3 class=\"tw-text-base tw-leading-6 tw-font-medium tw-text-gray-900\">Outputs</h3>\n      </div>\n      <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n        <table class=\"default-table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Type</th>\n            <th scope=\"col\"/>\n          </tr>\n          </thead>\n          <tbody>\n          {outputs.map(output => {\n\n              const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == output.type);\n              const typeDisplayName = descriptor?.displayName ?? output.type;\n\n              return (\n                <tr>\n                  <td class=\"tw-whitespace-nowrap\">{output.name}</td>\n                  <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                  <td class=\"tw-pr-6\">\n                    <elsa-context-menu\n                      menuItems={[\n                        {text: 'Edit', handler: e => this.onEditOutputClick(e, output), icon: <EditIcon/>},\n                        {text: 'Delete', handler: e => this.onDeleteOutputClick(e, output), icon: <DeleteIcon/>},\n                      ]}\n                    />\n                  </td>\n                </tr>);\n            }\n          )}\n          </tbody>\n        </table>\n      </div>\n      <div class=\"tw-flex tw-justify-end tw-m-4\">\n        <button class=\"elsa-btn elsa-btn-primary\" onClick={e => this.onAddOutputClick()}>Add output parameter</button>\n      </div>\n    </div>\n  };\n\n  private renderOutcomes = () => {\n    const outcomes = [...this.outcomes];\n\n    return <div>\n      <div class=\"tw-p-4\">\n        <h3 class=\"tw-text-base tw-leading-6 tw-font-medium tw-text-gray-900\">Outcomes</h3>\n      </div>\n      <FormEntry label=\"\" fieldId=\"WorkflowDefinitionOutcomes\" hint=\"Enter a list of possible outcomes for this workflow.\">\n        <elsa-input-tags placeHolder=\"Add outcome\" values={outcomes} onValueChanged={e => this.onOutcomesChanged(e.detail)}/>\n      </FormEntry>\n    </div>\n  };\n\n  private getInputNameExists = (name: string): boolean => !!this.inputsState.find(x => x.name == name);\n  private getOutputNameExists = (name: string): boolean => !!this.outputsState.find(x => x.name == name);\n\n  private updateInputsState = (value: Array<InputDefinition>) => {\n    this.inputsState = value;\n    this.inputsChanged.emit(value);\n  };\n\n  private updateOutputsState = (value: Array<OutputDefinition>) => {\n    this.outputsState = value;\n    this.outputsChanged.emit(value);\n  };\n\n  private generateNewInputName = () => {\n    const inputs = this.inputsState;\n    let counter = inputs.length;\n\n    while (true) {\n      const newName = `Input${++counter}`;\n\n      if (!this.getInputNameExists(newName))\n        return newName;\n    }\n  };\n\n  private generateNewOutputName = () => {\n    const outputs = this.outputsState;\n    let counter = outputs.length;\n\n    while (true) {\n      const newName = `Output${++counter}`;\n\n      if (!this.getOutputNameExists(newName))\n        return newName;\n    }\n  };\n\n  private onAddInputClick = async () => {\n    const newName = this.generateNewInputName();\n    const input: InputDefinition = {name: newName, type: 'Object', displayName: newName, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-input-editor-dialog-content input={input}/>, {actions: [this.inputSaveAction]})\n  };\n\n  private onAddOutputClick = async () => {\n    const newName = this.generateNewOutputName();\n    const output: OutputDefinition = {name: newName, type: 'Object', displayName: newName, isArray: false};\n\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-output-editor-dialog-content output={output}/>, {actions: [this.outputSaveAction]})\n  };\n\n  private onEditInputClick = async (e: Event, input: InputDefinition) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-input-editor-dialog-content input={input}/>, {actions: [this.inputSaveAction]});\n  };\n\n  private onEditOutputClick = async (e: Event, output: OutputDefinition) => {\n    e.preventDefault();\n    this.modalDialogInstance = this.modalDialogService.show(() => <elsa-activity-output-editor-dialog-content output={output}/>, {actions: [this.outputSaveAction]});\n  };\n\n  private onDeleteInputClick = (e: Event, input: InputDefinition) => {\n    e.preventDefault();\n    const inputs = this.inputsState.filter(x => x != input);\n    this.updateInputsState(inputs);\n  };\n\n  private onDeleteOutputClick = (e: Event, output: OutputDefinition) => {\n    e.preventDefault();\n    const outputs = this.outputsState.filter(x => x != output);\n    this.updateOutputsState(outputs);\n  };\n\n  private onInputDefinitionChanged = async (a: ModalActionClickArgs) => {\n    const updatedInput = await (a.instance.modalDialogContentRef as HTMLElsaActivityInputEditorDialogContentElement).getInput();\n    let inputs = this.inputsState;\n    const inputExists = !!inputs.find(x => x == updatedInput);\n\n    if (inputExists)\n      inputs = [...inputs];\n    else\n      inputs = [...inputs, updatedInput];\n\n    inputs = inputs.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateInputsState(inputs);\n  };\n\n  private onOutputDefinitionChanged = async (a: ModalActionClickArgs) => {\n    const updatedOutput = await (a.instance.modalDialogContentRef as HTMLElsaActivityOutputEditorDialogContentElement).getOutput();\n    let outputs = this.outputsState;\n    const outputExists = !!outputs.find(x => x == updatedOutput);\n\n    if (outputExists)\n      outputs = [...outputs];\n    else\n      outputs = [...outputs, updatedOutput];\n\n    outputs = outputs.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n\n    this.updateOutputsState(outputs);\n  };\n\n  private onOutcomesChanged = (outcomes: Array<string>) => {\n    this.outcomesChanged.emit(outcomes);\n  }\n}\n","import {Component, Event, EventEmitter, h, Prop, Watch} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {EventBus} from \"../../../../services\";\nimport {WorkflowDefinition} from \"../../models/entities\";\nimport {WorkflowDefinitionsApi} from \"../../services/api\";\nimport {DeleteIcon, RevertIcon, PublishedIcon} from \"../../../../components/icons/tooling\";\nimport moment from \"moment\";\nimport {ModalDialogService, DefaultModalActions, DefaultContents, ModalType} from \"../../../../components/shared/modal-dialog\";\n\n@Component({\n  tag: 'elsa-workflow-definition-version-history',\n})\nexport class WorkflowDefinitionVersionHistory {\n  private readonly eventBus: EventBus;\n  private readonly workflowDefinitionApi: WorkflowDefinitionsApi;\n  private readonly modalDialogService: ModalDialogService;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.workflowDefinitionApi = Container.get(WorkflowDefinitionsApi);\n    this.modalDialogService = Container.get(ModalDialogService);\n  }\n\n  @Prop() selectedVersion: WorkflowDefinition;\n  @Prop() workflowVersions: Array<WorkflowDefinition>;\n  @Prop() serverUrl: string;\n  @Event() versionSelected: EventEmitter<WorkflowDefinition>;\n  @Event() deleteVersionClicked: EventEmitter<WorkflowDefinition>;\n  @Event() revertVersionClicked: EventEmitter<WorkflowDefinition>;\n\n  onViewVersionClick = (e: Event, version: WorkflowDefinition) => {\n    e.preventDefault();\n    this.versionSelected.emit(version);\n  };\n\n  onDeleteVersionClick = async (e: Event, version: WorkflowDefinition) => {\n    e.preventDefault();\n    this.modalDialogService.show(\n      () => DefaultContents.Warning(\"Are you sure you want to delete this version?\"),\n      {\n        modalType: ModalType.Confirmation,\n        actions: [DefaultModalActions.Delete(() => this.deleteVersionClicked.emit(version)), DefaultModalActions.Cancel()]\n      });\n  };\n\n  onRevertVersionClick = (e: Event, version: WorkflowDefinition) => {\n    e.preventDefault();\n    this.revertVersionClicked.emit(version);\n  };\n\n  render() {\n    return (\n      <div>\n        <table>\n          <thead>\n          <tr>\n            <th/>\n            <th>Version</th>\n            <th>Created</th>\n            <th/>\n            <th/>\n          </tr>\n          </thead>\n          <tbody>\n          {this.workflowVersions.map(v => {\n              let menuItems = [];\n              menuItems.push({text: 'Delete', handler: e => this.onDeleteVersionClick(e, v), icon: <DeleteIcon/>});\n\n              if (!v.isLatest)\n                menuItems.push({text: 'Revert', handler: e => this.onRevertVersionClick(e, v), icon: <RevertIcon/>});\n\n              return (\n                <tr>\n                  <td>{v.isPublished ? <PublishedIcon/> : \"\"}</td>\n                  <td>{v.version}</td>\n                  <td>{moment(v.createdAt).format('DD-MM-YYYY HH:mm:ss')}</td>\n                  <td>\n                    <button onClick={e => this.onViewVersionClick(e, v)}\n                            type=\"button\"\n                            disabled={this.selectedVersion.version == v.version}\n                            class={this.selectedVersion.version == v.version ? \"elsa-btn elsa-btn-primary\" : \"elsa-btn elsa-btn-secondary\"}>\n                      View\n                    </button>\n                  </td>\n                  <td>\n                    {v.isPublished || v.isPublished ? undefined : <elsa-context-menu menuItems={menuItems}/>}\n                  </td>\n                </tr>\n              );\n            }\n          )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n"],"mappings":"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"}