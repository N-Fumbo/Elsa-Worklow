{"version":3,"names":["SingleLineInput","this","onPropertyEditorChanged","e","inputElement","target","inputContext","inputChanged","value","SyntaxNames","Literal","onExpressionChanged","detail","expression","syntax","render","inputDescriptor","fieldName","name","fieldId","displayName","hint","description","input","getInputPropertyValue","defaultValue","getValueOrDefault","_a","_c","_b","type","defaultSyntax","h","label","id","onChange"],"sources":["./src/components/inputs/single-line.tsx"],"sourcesContent":["import {Component, h, Prop} from '@stencil/core';\nimport {LiteralExpression, SyntaxNames} from \"../../models\";\nimport {ActivityInputContext} from \"../../services/activity-input-driver\";\nimport {getInputPropertyValue} from \"../../utils\";\nimport {ExpressionChangedArs} from \"../shared/input-control-switch/input-control-switch\";\nimport descriptorsStore from \"../../data/descriptors-store\";\n\n@Component({\n  tag: 'elsa-single-line-input',\n  shadow: false\n})\nexport class SingleLineInput {\n  @Prop() public inputContext: ActivityInputContext;\n\n  public render() {\n    const inputContext = this.inputContext;\n    const inputDescriptor = inputContext.inputDescriptor;\n    const fieldName = inputDescriptor.name;\n    const fieldId = inputDescriptor.name;\n    const displayName = inputDescriptor.displayName;\n    const hint = inputDescriptor.description;\n    const input = getInputPropertyValue(inputContext);\n    const defaultValue = inputDescriptor.defaultValue;\n    const value = this.getValueOrDefault((input?.expression as LiteralExpression)?.value, defaultValue); // TODO: The \"value\" field is currently hardcoded, but we should be able to be more flexible and potentially have different fields for a given syntax.\n    const syntax = input?.expression?.type ?? inputDescriptor.defaultSyntax;\n\n    return (\n      <elsa-input-control-switch label={displayName} hint={hint} syntax={syntax} expression={value} onExpressionChanged={this.onExpressionChanged}>\n          <input type=\"text\" name={fieldName} id={fieldId} value={value} onChange={this.onPropertyEditorChanged}/>\n      </elsa-input-control-switch>\n    );\n  }\n\n  private onPropertyEditorChanged = (e: Event) => {\n    const inputElement = e.target as HTMLInputElement;\n    this.inputContext.inputChanged(inputElement.value, SyntaxNames.Literal);\n  }\n\n  private onExpressionChanged = (e: CustomEvent<ExpressionChangedArs>) => {\n    this.inputContext.inputChanged(e.detail.expression, e.detail.syntax);\n  }\n\n  private getValueOrDefault(value: string | undefined, defaultValue: string | undefined) {\n    return value ?? defaultValue ?? '';\n  }\n}\n"],"mappings":"4OAWaA,EAAe,M,yBAsBlBC,KAAAC,wBAA2BC,IACjC,MAAMC,EAAeD,EAAEE,OACvBJ,KAAKK,aAAaC,aAAaH,EAAaI,MAAOC,EAAYC,QAAQ,EAGjET,KAAAU,oBAAuBR,IAC7BF,KAAKK,aAAaC,aAAaJ,EAAES,OAAOC,WAAYV,EAAES,OAAOE,OAAO,E,4BAzB/DC,S,UACL,MAAMT,EAAeL,KAAKK,aAC1B,MAAMU,EAAkBV,EAAaU,gBACrC,MAAMC,EAAYD,EAAgBE,KAClC,MAAMC,EAAUH,EAAgBE,KAChC,MAAME,EAAcJ,EAAgBI,YACpC,MAAMC,EAAOL,EAAgBM,YAC7B,MAAMC,EAAQC,EAAsBlB,GACpC,MAAMmB,EAAeT,EAAgBS,aACrC,MAAMjB,EAAQP,KAAKyB,mBAAkBC,EAACJ,IAAK,MAALA,SAAK,SAALA,EAAOV,cAAgC,MAAAc,SAAA,SAAAA,EAAEnB,MAAOiB,GACtF,MAAMX,GAASc,GAAAC,EAAAN,IAAK,MAALA,SAAK,SAALA,EAAOV,cAAU,MAAAgB,SAAA,SAAAA,EAAEC,QAAI,MAAAF,SAAA,EAAAA,EAAIZ,EAAgBe,cAE1D,OACEC,EAAA,6BAA2BC,MAAOb,EAAaC,KAAMA,EAAMP,OAAQA,EAAQD,WAAYL,EAAOG,oBAAqBV,KAAKU,qBACpHqB,EAAA,SAAOF,KAAK,OAAOZ,KAAMD,EAAWiB,GAAIf,EAASX,MAAOA,EAAO2B,SAAUlC,KAAKC,0B,CAc9EwB,kBAAkBlB,EAA2BiB,G,MACnD,OAAOE,EAAAnB,IAAK,MAALA,SAAK,EAALA,EAASiB,KAAY,MAAAE,SAAA,EAAAA,EAAI,E"}