{"version":3,"names":["VariablesViewer","render","variables","this","storageDrivers","descriptorsStore","h","class","scope","map","variable","storage","find","x","typeName","storageDriverTypeName","storageName","_a","displayName","descriptor","variableDescriptors","typeDisplayName","_b","variableValue","getVariableValue","name","workflowInstance","persistentVariables","properties","PersistentVariablesDictionary","key","id"],"sources":["./src/modules/workflow-definitions/components/workflow-properties/variables-viewer.tsx"],"sourcesContent":["import {Component, h, Prop, } from \"@stencil/core\";\nimport {StorageDriverDescriptor, Variable, WorkflowInstance} from \"../../../../models\";\nimport descriptorsStore from \"../../../../data/descriptors-store\";\nimport {WorkflowDefinition} from \"../../models/entities\";\n\n@Component({\n  tag: 'elsa-variables-viewer',\n  shadow: false\n})\nexport class VariablesViewer {\n\n  @Prop() variables?: Array<Variable>;\n  @Prop() workflowDefinition: WorkflowDefinition;\n  @Prop() workflowInstance: WorkflowInstance;\n\n  render() {\n    const variables = this.variables;\n    const storageDrivers: Array<StorageDriverDescriptor> = descriptorsStore.storageDrivers;\n\n    return (\n      <div>\n        <div class=\"tw-align-middle tw-inline-block tw-min-w-full tw-border-b tw-border-gray-200\">\n          <table class=\"default-table\">\n            <thead>\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Type</th>\n              <th scope=\"col\">Storage</th>\n              <th scope=\"col\">Value</th>\n            </tr>\n            </thead>\n            <tbody>\n            {variables.map(variable => {\n                const storage = storageDrivers.find(x => x.typeName == variable.storageDriverTypeName);\n                const storageName = storage?.displayName ?? '-';\n                const descriptor = descriptorsStore.variableDescriptors.find(x => x.typeName == variable.typeName);\n                const typeDisplayName = descriptor?.displayName ?? variable.typeName;\n                const variableValue = this.getVariableValue(variable, storage);\n\n                return (\n                  <tr>\n                    <td class=\"tw-whitespace-nowrap\">{variable.name}</td>\n                    <td class=\"tw-whitespace-nowrap\">{typeDisplayName}</td>\n                    <td>{storageName}</td>\n                    <td class=\"tw-pr-6\">{variableValue}</td>\n                  </tr>);\n              }\n            )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private getVariableValue(variable: Variable, storage: StorageDriverDescriptor) : any {\n    if(storage?.typeName !== 'Elsa.Workflows.Core.Implementations.WorkflowStorageDriver, Elsa.Workflows.Core')\n      return null;\n\n    const workflowInstance = this.workflowInstance;\n    const persistentVariables = workflowInstance.properties.PersistentVariablesDictionary;\n    const key = `${workflowInstance.id}:Workflow1:${variable.name}`;\n    return persistentVariables[key];\n  }\n}\n"],"mappings":"6GASaA,EAAe,M,oHAM1BC,SACE,MAAMC,EAAYC,KAAKD,UACvB,MAAME,EAAiDC,EAAiBD,eAExE,OACEE,EAAA,WACEA,EAAA,OAAKC,MAAM,gFACTD,EAAA,SAAOC,MAAM,iBACXD,EAAA,aACAA,EAAA,UACEA,EAAA,MAAIE,MAAM,OAAK,QACfF,EAAA,MAAIE,MAAM,OAAK,QACfF,EAAA,MAAIE,MAAM,OAAK,WACfF,EAAA,MAAIE,MAAM,OAAK,WAGjBF,EAAA,aACCJ,EAAUO,KAAIC,I,QACX,MAAMC,EAAUP,EAAeQ,MAAKC,GAAKA,EAAEC,UAAYJ,EAASK,wBAChE,MAAMC,GAAcC,EAAAN,IAAO,MAAPA,SAAO,SAAPA,EAASO,eAAW,MAAAD,SAAA,EAAAA,EAAI,IAC5C,MAAME,EAAad,EAAiBe,oBAAoBR,MAAKC,GAAKA,EAAEC,UAAYJ,EAASI,WACzF,MAAMO,GAAkBC,EAAAH,IAAU,MAAVA,SAAU,SAAVA,EAAYD,eAAW,MAAAI,SAAA,EAAAA,EAAIZ,EAASI,SAC5D,MAAMS,EAAgBpB,KAAKqB,iBAAiBd,EAAUC,GAEtD,OACEL,EAAA,UACEA,EAAA,MAAIC,MAAM,wBAAwBG,EAASe,MAC3CnB,EAAA,MAAIC,MAAM,wBAAwBc,GAClCf,EAAA,UAAKU,GACLV,EAAA,MAAIC,MAAM,WAAWgB,GAClB,O,CAUbC,iBAAiBd,EAAoBC,GAC3C,IAAGA,IAAO,MAAPA,SAAO,SAAPA,EAASG,YAAa,iFACvB,OAAO,KAET,MAAMY,EAAmBvB,KAAKuB,iBAC9B,MAAMC,EAAsBD,EAAiBE,WAAWC,8BACxD,MAAMC,EAAM,GAAGJ,EAAiBK,gBAAgBrB,EAASe,OACzD,OAAOE,EAAoBG,E"}