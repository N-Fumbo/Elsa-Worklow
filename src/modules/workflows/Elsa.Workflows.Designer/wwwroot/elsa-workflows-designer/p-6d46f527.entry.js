import{r as t,h as i,a as e}from"./p-a7a3baa1.js";import{P as s}from"./p-d59dea2d.js";import{a8 as a,a as o,q as n,C as r,B as c,M as l,w as h,af as d}from"./p-dd7ad463.js";import"./p-fcfa9e22.js";import"./p-1de51046.js";import"./p-144a434e.js";import"./p-72dc819a.js";import"./p-e71312f9.js";import"./p-4031f4ff.js";var w=function(t,i,e,o){var a,n=arguments.length,r=n<3?i:null===o?o=Object.getOwnPropertyDescriptor(i,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,i,e,o);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(r=(n<3?a(r):n>3?a(i,e,r):a(i,e))||r);return n>3&&r&&Object.defineProperty(i,e,r),r},f=function(t,i){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,i)};let p=class{constructor(t){this.getHttpClient=async()=>await this.provider.getHttpClient(),this.provider=t}async list(t){let i={page:t.page,pageSize:t.pageSize};const e=n(i),o=await this.getHttpClient();return(await o.get(`workflow-instances/${t.workflowInstanceId}/journal${e}`)).data}async getLastEntry(t){const i=await this.getHttpClient();return(await i.get(`workflow-instances/${t.workflowInstanceId}/journal/${t.activityId}`)).data}};p=w([a(),f("design:paramtypes",[o])],p);const y=":root{--workflow-editor-width:580px;--activity-picker-width:300px;--activity-editor-height:200px}elsa-flowchart{position:absolute;left:var(--activity-picker-width);top:0;right:var(--workflow-editor-width);bottom:var(--activity-editor-height)}.elsa-panel-toolbar{left:var(--activity-picker-width);right:var(--workflow-editor-width)}elsa-panel.panel-state-expanded.elsa-activity-picker-container{width:var(--activity-picker-width)}elsa-panel.panel-state-expanded.elsa-workflow-editor-container{width:var(--workflow-editor-width);right:0;left:unset}elsa-panel.panel-state-expanded.elsa-activity-editor-container{height:var(--activity-editor-height);right:var(--workflow-editor-width);left:var(--activity-picker-width);bottom:0}.activity-picker-closed .activity-list{display:none}.activity-picker-closed elsa-flowchart{left:0}.object-editor-closed .object-editor-container{display:none}.object-editor-closed elsa-flowchart{right:0}.activity-editor-closed .activity-editor-container{display:none}.activity-editor-closed elsa-flowchart{bottom:0}",u=class{constructor(e){t(this,e),this.isJournalSelecting=!1,this.renderSelectedObject=()=>{const t=this.selectedActivity;if(t){const e=this.selectedExecutionLogRecord;return i("elsa-activity-properties",{activity:t,activityExecutionLog:e})}},this.getWorkflowInternal=async()=>{const t=await this.flowchartElement.export(),i=this.mainWorkflowDefinitionState;return i.root=t,i},this.updateLayout=async()=>{await this.flowchartElement.updateLayout()},this.updateContainerLayout=async(t,i)=>{i?this.container.classList.remove(t):this.container.classList.toggle(t,!0),await this.updateLayout()},this.onActivityPickerPanelStateChanged=async t=>await this.updateContainerLayout("activity-picker-closed",t.expanded),this.onActivityEditorPanelStateChanged=async t=>await this.updateContainerLayout("object-editor-closed",t.expanded),this.monacoLibPath=void 0,this.workflowDefinition=void 0,this.workflowInstance=void 0,this.mainWorkflowDefinitionState=void 0,this.targetWorkflowDefinitionState=void 0,this.workflowInstanceState=void 0,this.selectedActivity=void 0,this.selectedExecutionLogRecord=void 0,this.flowchartRootActivity=void 0,this.eventBus=r.get(c),this.journalApi=r.get(p)}handleMonacoLibPath(t){r.get(l).monacoLibPath=t}async onWorkflowDefinitionChanged(t){await this.importWorkflow(t,this.workflowInstanceState)}async onWorkflowInstanceChanged(t){await this.importWorkflow(this.mainWorkflowDefinitionState,this.workflowInstance)}async handleResize(){await this.updateLayout()}async handlePanelCollapsed(){this.selectedActivity=null}async handleContainerSelected(t){}async handleActivitySelected(t){if(this.isJournalSelecting)return;this.selectedActivity=t.detail.activity;const i=this.workflowInstance.id,e=this.selectedActivity.id;this.selectedExecutionLogRecord=await this.journalApi.getLastEntry({workflowInstanceId:i,activityId:e})}async handleJournalItemSelected(t){const i=t.detail.activity.id,e=t.detail.activityNode,o=await this.flowchartElement.getGraph(),a=o.getNodes().find((t=>t.id==i)),n=t.detail.executionEventBlock;this.selectedExecutionLogRecord=n.faulted?n.faultedRecord:n.completed?n.completedRecord:n.startedRecord,this.isJournalSelecting=!0,null==a?(await this.importSelectedItemsWorkflow(e),this.selectedActivity=t.detail.activity,o.resetSelection()):(this.selectedActivity=a.data,o.resetSelection(a)),this.isJournalSelecting=!1}async importSelectedItemsWorkflow(t){const i=this.findConsumingWorkflowRecursive(t);this.flowchartRootActivity=await this.getFlowchartByActivityNode(i),window.requestAnimationFrame((async()=>{await this.flowchartElement.updateGraph()}))}findConsumingWorkflowRecursive(t){const i=t.parents[0];if(null==i)return t;{const t=i.activity.type;return"Elsa.Workflow"==t||"Elsa.Flowchart"==t?this.findConsumingWorkflowRecursive(i):i}}async getFlowchartByActivityNode(t){return null==t.parents[0]?this.workflowDefinition.root:this.findFlowchartOfActivityRecursive(t.activity)}findFlowchartOfActivityRecursive(t){return"Elsa.Flowchart"==t.type?t:null==t.root&&"Elsa.Flowchart"==t.body.type?t.body:this.findFlowchartOfActivityRecursive(t.root)}async getCanvas(){return this.flowchartElement}async registerActivityDrivers(t){t(r.get(h))}getWorkflow(){return this.getWorkflowInternal()}async importWorkflow(t,i){this.workflowInstanceState=i,await this.updateWorkflowDefinition(t),window.requestAnimationFrame((async()=>{await this.flowchartElement.updateGraph()})),await this.eventBus.emit(d.WorkflowDefinition.Imported,this,{workflowDefinition:t})}async updateWorkflowDefinition(t){this.mainWorkflowDefinitionState=t}async componentWillLoad(){this.workflowInstanceState=this.workflowInstance,await this.updateWorkflowDefinition(this.workflowDefinition)}async componentDidLoad(){this.mainWorkflowDefinitionState&&this.workflowInstanceState&&await this.importWorkflow(this.workflowDefinition,this.workflowInstance),await this.eventBus.emit(d.WorkflowEditor.Ready,this,{workflowEditor:this})}render(){var t;const e=this.mainWorkflowDefinitionState,o={workflowInstance:this.workflowInstanceState,workflowDefinition:e};return this.flowchartRootActivity=null!==(t=this.flowchartRootActivity)&&void 0!==t?t:this.mainWorkflowDefinitionState.root,i("div",{class:"tw-absolute tw-inset-0",ref:t=>this.container=t},i("elsa-panel",{class:"elsa-activity-picker-container tw-z-30",position:s.Left,onExpandedStateChanged:t=>this.onActivityPickerPanelStateChanged(t.detail)},i("elsa-workflow-journal",{model:o})),i("elsa-flowchart",{ref:t=>this.flowchartElement=t,rootActivity:this.flowchartRootActivity,interactiveMode:!1}),i("elsa-panel",{class:"elsa-workflow-editor-container tw-z-30",position:s.Right,onExpandedStateChanged:t=>this.onActivityEditorPanelStateChanged(t.detail)},i("div",{class:"object-editor-container"},i("elsa-workflow-instance-properties",{workflowDefinition:e,workflowInstance:this.workflowInstanceState}))),i("elsa-panel",{class:"elsa-activity-editor-container",position:s.Bottom},i("div",{class:"activity-editor-container"},this.renderSelectedObject())))}get el(){return e(this)}static get watchers(){return{monacoLibPath:["handleMonacoLibPath"],workflowDefinition:["onWorkflowDefinitionChanged"],workflowInstance:["onWorkflowInstanceChanged"]}}};u.style=y;export{u as elsa_workflow_instance_viewer};