{"version":3,"names":["JournalApi","constructor","provider","this","getHttpClient","async","request","queryString","page","pageSize","queryStringText","serializeQueryString","httpClient","response","get","workflowInstanceId","data","activityId","__decorate","Service","ElsaClientProvider","viewerCss","WorkflowInstanceViewer","hostRef","isJournalSelecting","renderSelectedObject","activity","selectedActivity","selectedRecord","selectedExecutionLogRecord","h","activityExecutionLog","getWorkflowInternal","root","flowchartElement","export","workflowDefinition","mainWorkflowDefinitionState","updateLayout","updateContainerLayout","panelClassName","panelExpanded","container","classList","remove","toggle","onActivityPickerPanelStateChanged","e","expanded","onActivityEditorPanelStateChanged","eventBus","Container","EventBus","journalApi","handleMonacoLibPath","value","settings","MonacoEditorSettings","monacoLibPath","importWorkflow","workflowInstanceState","workflowInstance","detail","id","getLastEntry","activityNode","graph","getGraph","graphNode","getNodes","find","n","executionEventBlock","faulted","faultedRecord","completed","completedRecord","startedRecord","importSelectedItemsWorkflow","resetSelection","consumingWorkflowNode","findConsumingWorkflowRecursive","flowchartRootActivity","getFlowchartByActivityNode","window","requestAnimationFrame","updateGraph","parent","parents","type","isConsumingWorkflowSameAsMain","findFlowchartOfActivityRecursive","body","register","registry","ActivityDriverRegistry","getWorkflow","updateWorkflowDefinition","emit","WorkflowEditorEventTypes","WorkflowDefinition","Imported","WorkflowEditor","Ready","workflowEditor","render","workflowJournalModel","_a","class","ref","el","position","PanelPosition","Left","onExpandedStateChanged","model","rootActivity","interactiveMode","Right","Bottom"],"sources":["./src/modules/workflow-instances/services/journal-api.ts","./src/modules/workflow-instances/components/viewer.scss?tag=elsa-workflow-instance-viewer","./src/modules/workflow-instances/components/viewer.tsx"],"sourcesContent":["import {OrderBy, OrderDirection, PagedList, WorkflowExecutionLogRecord } from \"../../../models\";\nimport {serializeQueryString} from \"../../../utils\";\nimport {Service} from \"typedi\";\nimport {ElsaClientProvider} from \"../../../services\";\n\n@Service()\nexport class JournalApi {\n\n  private provider: ElsaClientProvider;\n\n  constructor(provider: ElsaClientProvider) {\n    this.provider = provider;\n  }\n\n  async list(request: GetWorkflowJournalRequest): Promise<PagedList<WorkflowExecutionLogRecord>> {\n    let queryString = {\n      page: request.page,\n      pageSize: request.pageSize\n    };\n\n    const queryStringText = serializeQueryString(queryString);\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.get<PagedList<WorkflowExecutionLogRecord>>(`workflow-instances/${request.workflowInstanceId}/journal${queryStringText}`);\n    return response.data;\n  }\n\n  async getLastEntry(request: GetLastEntryRequest): Promise<WorkflowExecutionLogRecord> {\n\n    const httpClient = await this.getHttpClient();\n    const response = await httpClient.get<WorkflowExecutionLogRecord>(`workflow-instances/${request.workflowInstanceId}/journal/${request.activityId}`);\n    return response.data;\n  }\n\n  private getHttpClient = async () => await this.provider.getHttpClient();\n}\n\nexport interface GetWorkflowJournalRequest {\n  workflowInstanceId: string;\n  page?: number;\n  pageSize?: number;\n}\n\nexport interface GetLastEntryRequest {\n  workflowInstanceId: string;\n  activityId: string;\n}\n",":root {\n  --workflow-editor-width: 580px;\n  --activity-picker-width: 300px;\n  --activity-editor-height: 200px;\n}\n\n.x6-graph-scroller {\n  height: calc(100vh - var(--activity-editor-height) - 64px) !important;\n}\n\nelsa-flowchart {\n  position: absolute;\n  left: var(--activity-picker-width);\n  top: 0;\n  right: var(--workflow-editor-width);\n  bottom: var(--activity-editor-height);\n}\n\n.elsa-panel-toolbar {\n  left: var(--activity-picker-width);\n  right: var(--workflow-editor-width);\n}\n\nelsa-panel.panel-state-expanded.elsa-activity-picker-container {\n  width: var(--activity-picker-width);\n}\n\nelsa-panel.panel-state-expanded.elsa-workflow-editor-container {\n  width: var(--workflow-editor-width);\n  right: 0;\n  left: unset;\n}\n\nelsa-panel.panel-state-expanded.elsa-activity-editor-container {\n  height: var(--activity-editor-height);\n  right: var(--workflow-editor-width);\n  left: var(--activity-picker-width);\n  bottom: 0;\n}\n\n.activity-picker-closed {\n\n  .activity-list {\n    display: none;\n  }\n\n  elsa-flowchart {\n    left: 0;\n  }\n}\n\n.object-editor-closed {\n\n  .object-editor-container {\n    display: none;\n  }\n\n  elsa-flowchart {\n    right: 0;\n  }\n}\n\n\n.activity-editor-closed {\n\n  .activity-editor-container {\n    display: none;\n  }\n\n  elsa-flowchart {\n    bottom: 0;\n  }\n}\n","import {Component, h, Listen, Prop, State, Method, Watch, Element} from '@stencil/core';\nimport {Container} from \"typedi\";\nimport {PanelPosition, PanelStateChangedArgs} from '../../../components/panel/models';\nimport {\n  Activity,\n  ActivitySelectedArgs,\n  ContainerSelectedArgs,\n  WorkflowInstance,\n  WorkflowExecutionLogRecord,\n  Workflow\n} from '../../../models';\nimport {ActivityDriverRegistry, EventBus, ActivityNode} from '../../../services';\nimport {MonacoEditorSettings} from \"../../../services\";\nimport {WorkflowDefinition} from \"../../workflow-definitions/models/entities\";\nimport {WorkflowEditorEventTypes} from \"../../workflow-definitions/models/ui\";\nimport {JournalItemSelectedArgs} from '../events';\nimport {JournalApi} from \"../services/journal-api\";\nimport {Flowchart} from '../../flowchart/models';\nimport {WorkflowJournalModel} from \"../models\";\n\n@Component({\n  tag: 'elsa-workflow-instance-viewer',\n  styleUrl: 'viewer.scss',\n})\nexport class WorkflowInstanceViewer {\n  private readonly eventBus: EventBus;\n  private readonly journalApi: JournalApi;\n  private flowchartElement: HTMLElsaFlowchartElement;\n  private container: HTMLDivElement;\n  private isJournalSelecting: boolean = false;\n\n  constructor() {\n    this.eventBus = Container.get(EventBus);\n    this.journalApi = Container.get(JournalApi);\n  }\n\n  @Element() private el: HTMLElsaWorkflowDefinitionEditorElement;\n  @Prop({attribute: 'monaco-lib-path'}) public monacoLibPath: string;\n  @Prop() workflowDefinition: WorkflowDefinition;\n  @Prop() workflowInstance: WorkflowInstance;\n  @State() private mainWorkflowDefinitionState: WorkflowDefinition;\n  @State() private targetWorkflowDefinitionState: WorkflowDefinition;\n  @State() private workflowInstanceState: WorkflowInstance;\n  @State() private selectedActivity?: Activity;\n  @State() private selectedExecutionLogRecord?: WorkflowExecutionLogRecord;\n  @State() private flowchartRootActivity: Activity;\n\n  @Watch('monacoLibPath')\n  private handleMonacoLibPath(value: string) {\n    const settings = Container.get(MonacoEditorSettings);\n    settings.monacoLibPath = value;\n  }\n\n  @Watch('workflowDefinition')\n  async onWorkflowDefinitionChanged(value: WorkflowDefinition) {\n    await this.importWorkflow(value, this.workflowInstanceState);\n\n  }\n\n  @Watch('workflowInstance')\n  async onWorkflowInstanceChanged(value: WorkflowDefinition) {\n    await this.importWorkflow(this.mainWorkflowDefinitionState, this.workflowInstance);\n  }\n\n  @Listen('resize', {target: 'window'})\n  private async handleResize() {\n    await this.updateLayout();\n  }\n\n  @Listen('collapsed')\n  private async handlePanelCollapsed() {\n    this.selectedActivity = null;\n  }\n\n  @Listen('containerSelected')\n  private async handleContainerSelected(e: CustomEvent<ContainerSelectedArgs>) {\n    //this.selectedActivity = this.getCurrentContainer();\n  }\n\n  @Listen('activitySelected')\n  private async handleActivitySelected(e: CustomEvent<ActivitySelectedArgs>) {\n    if (this.isJournalSelecting)\n      return;\n\n    this.selectedActivity = e.detail.activity;\n    const workflowInstanceId = this.workflowInstance.id;\n    const activityId = this.selectedActivity.id;\n    this.selectedExecutionLogRecord = await this.journalApi.getLastEntry({workflowInstanceId, activityId});\n  }\n\n  @Listen('journalItemSelected')\n  private async handleJournalItemSelected(e: CustomEvent<JournalItemSelectedArgs>) {\n    const activityId = e.detail.activity.id;\n    const activityNode = e.detail.activityNode;\n    const graph = await this.flowchartElement.getGraph();\n    const graphNode = graph.getNodes().find(n => n.id == activityId)\n\n    const executionEventBlock = e.detail.executionEventBlock;\n    this.selectedExecutionLogRecord = executionEventBlock.faulted ? executionEventBlock.faultedRecord : executionEventBlock.completed ? executionEventBlock.completedRecord : executionEventBlock.startedRecord;\n\n    this.isJournalSelecting = true;\n    if (graphNode == null) {\n      await this.importSelectedItemsWorkflow(activityNode);\n      this.selectedActivity = e.detail.activity;\n      graph.resetSelection();\n    } else {\n      this.selectedActivity = graphNode.data;\n      graph.resetSelection(graphNode);\n    }\n    this.isJournalSelecting = false;\n  }\n\n  private async importSelectedItemsWorkflow(activityNode: ActivityNode) {\n    const consumingWorkflowNode = this.findConsumingWorkflowRecursive(activityNode);\n    this.flowchartRootActivity = await this.getFlowchartByActivityNode(consumingWorkflowNode);\n    window.requestAnimationFrame(async () => {\n      await this.flowchartElement.updateGraph();\n    });\n  }\n\n  private findConsumingWorkflowRecursive(activityNode: ActivityNode): ActivityNode {\n    const parent = activityNode.parents[0];\n    if (parent == null) {\n      return activityNode;\n    } else {\n      const type = parent.activity.type;\n      if (type == \"Elsa.Workflow\" || type == \"Elsa.Flowchart\") {\n        return this.findConsumingWorkflowRecursive(parent);\n      } else {\n        return parent;\n      }\n    }\n  }\n\n  private async getFlowchartByActivityNode(consumingWorkflowNode: ActivityNode): Promise<Flowchart> {\n    const isConsumingWorkflowSameAsMain = consumingWorkflowNode.parents[0] == null;\n    return isConsumingWorkflowSameAsMain ? this.workflowDefinition.root as Flowchart : this.findFlowchartOfActivityRecursive(consumingWorkflowNode.activity);\n  }\n\n  private findFlowchartOfActivityRecursive(activity: Activity): Flowchart {\n    if (activity.type == \"Elsa.Flowchart\") {\n      return activity as Flowchart;\n    }\n    else if(activity.root == null && activity.body.type == \"Elsa.Flowchart\"){\n      return activity.body as Flowchart;\n    }\n    else {\n      return this.findFlowchartOfActivityRecursive((activity as Workflow).root);\n    }\n  }\n\n  @Method()\n  public async getCanvas(): Promise<HTMLElsaFlowchartElement> {\n    return this.flowchartElement;\n  }\n\n  @Method()\n  public async registerActivityDrivers(register: (registry: ActivityDriverRegistry) => void): Promise<void> {\n    const registry = Container.get(ActivityDriverRegistry);\n    register(registry);\n  }\n\n  @Method()\n  public getWorkflow(): Promise<WorkflowDefinition> {\n    return this.getWorkflowInternal();\n  }\n\n  @Method()\n  public async importWorkflow(workflowDefinition: WorkflowDefinition, workflowInstance: WorkflowInstance): Promise<void> {\n    this.workflowInstanceState = workflowInstance;\n    await this.updateWorkflowDefinition(workflowDefinition);\n    // Update the flowchart after state is updated.\n    window.requestAnimationFrame(async () => {\n      await this.flowchartElement.updateGraph();\n    });\n\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowDefinition.Imported, this, {workflowDefinition});\n  }\n\n  // Updates the workflow definition without importing it into the designer.\n  @Method()\n  public async updateWorkflowDefinition(workflowDefinition: WorkflowDefinition): Promise<void> {\n    this.mainWorkflowDefinitionState = workflowDefinition;\n  }\n\n  public async componentWillLoad() {\n    this.workflowInstanceState = this.workflowInstance;\n    await this.updateWorkflowDefinition(this.workflowDefinition);\n  }\n\n  public async componentDidLoad() {\n    if (!!this.mainWorkflowDefinitionState && !!this.workflowInstanceState)\n      await this.importWorkflow(this.workflowDefinition, this.workflowInstance);\n\n    await this.eventBus.emit(WorkflowEditorEventTypes.WorkflowEditor.Ready, this, {workflowEditor: this});\n  }\n\n  private renderSelectedObject = () => {\n    const activity = this.selectedActivity;\n    if (!!activity) {\n      const selectedRecord = this.selectedExecutionLogRecord;\n      return <elsa-activity-properties activity={activity} activityExecutionLog={selectedRecord}/>;\n    }\n  }\n\n  private getWorkflowInternal = async (): Promise<WorkflowDefinition> => {\n    const root = await this.flowchartElement.export();\n    const workflowDefinition = this.mainWorkflowDefinitionState;\n    workflowDefinition.root = root;\n    return workflowDefinition;\n  };\n\n  private updateLayout = async () => {\n    await this.flowchartElement.updateLayout();\n  };\n\n  private updateContainerLayout = async (panelClassName: string, panelExpanded: boolean) => {\n\n    if (panelExpanded)\n      this.container.classList.remove(panelClassName);\n    else\n      this.container.classList.toggle(panelClassName, true);\n\n    await this.updateLayout();\n  }\n\n  private onActivityPickerPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('activity-picker-closed', e.expanded)\n  private onActivityEditorPanelStateChanged = async (e: PanelStateChangedArgs) => await this.updateContainerLayout('object-editor-closed', e.expanded)\n\n  public render() {\n    const workflowDefinition = this.mainWorkflowDefinitionState;\n    const workflowInstance = this.workflowInstanceState;\n    const workflowJournalModel: WorkflowJournalModel = {\n      workflowInstance,\n      workflowDefinition\n    }\n\n    this.flowchartRootActivity = this.flowchartRootActivity ?? this.mainWorkflowDefinitionState.root;\n\n    return (\n\n      <div class=\"tw-absolute tw-inset-0\" ref={el => this.container = el}>\n        <elsa-panel\n          class=\"elsa-activity-picker-container tw-z-30\"\n          position={PanelPosition.Left}\n          onExpandedStateChanged={e => this.onActivityPickerPanelStateChanged(e.detail)}>\n          <elsa-workflow-journal model={workflowJournalModel}/>\n        </elsa-panel>\n        <elsa-flowchart\n          ref={el => this.flowchartElement = el}\n          rootActivity={this.flowchartRootActivity}\n          interactiveMode={false}/>\n        <elsa-panel\n          class=\"elsa-workflow-editor-container tw-z-30\"\n          position={PanelPosition.Right}\n          onExpandedStateChanged={e => this.onActivityEditorPanelStateChanged(e.detail)}>\n          <div class=\"object-editor-container\">\n            <elsa-workflow-instance-properties workflowDefinition={workflowDefinition} workflowInstance={this.workflowInstanceState}/>\n          </div>\n        </elsa-panel>\n        <elsa-panel\n          class=\"elsa-activity-editor-container\"\n          position={PanelPosition.Bottom}\n        >\n          <div class=\"activity-editor-container\">\n            {this.renderSelectedObject()}\n          </div>\n        </elsa-panel>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"}