{"version":3,"names":["ElsaCopyButton","this","copyToClipboard","isCopied","copyTextToClipboard","value","setTimeout","render","h","href","class","title","onClick","width","height","viewBox","stroke","fill","d","x","y","rx","points","FormPanel","renderPanel","onTabClick","e","tab","preventDefault","selectedTabIndex","tabs","findIndex","selectedTabIndexChanged","emit","onSubmit","formData","FormData","target","submitted","sort","a","b","order","actions","mainTitle","subTitle","orientation","readonly","isReadonly","method","isNullOrWhitespace","undefined","map","tabIndex","cssClass","displayText","disabled","content","length","action","display","isPrimary","isDangerous","buttonType","type","PanelActionType","Submit","cancelHandler","defaultHandler","actionInvoked","clickHandler","Cancel","text"],"sources":["./src/components/shared/forms/copy-button.tsx","./src/components/shared/form-panel/form-panel.tsx"],"sourcesContent":["import { Component, State, Prop, h } from '@stencil/core';\nimport { copyTextToClipboard } from '../../../utils';\n\n@Component({\n  tag: 'elsa-copy-button',\n  shadow: false,\n})\nexport class ElsaCopyButton {\n  @State() public isCopied = false;\n  @Prop() public value: string = '';\n\n  private copyToClipboard = () => {\n    this.isCopied = true;\n    copyTextToClipboard(this.value);\n    setTimeout(() => {\n      this.isCopied = false;\n    }, 500);\n  };\n\n  public render() {\n    return (\n      <a href=\"#\" class=\"tw-ml-2 tw-h-6 tw-w-6 tw-inline-block tw-text-blue-500 hover:tw-text-blue-300\" title=\"Copy value\">\n        {!this.isCopied ? (\n          <svg\n            onClick={() => this.copyToClipboard()}\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n            <rect x=\"8\" y=\"8\" width=\"12\" height=\"12\" rx=\"2\" />\n            <path d=\"M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2\" />\n          </svg>\n        ) : (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" /> <polyline points=\"9 11 12 14 20 6\" /> <path d=\"M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9\" />\n          </svg>\n        )}\n      </a>\n    );\n  }\n}\n","import {Component, Event, EventEmitter, h, Prop} from '@stencil/core';\nimport {TabChangedArgs, TabDefinition} from '../../../models';\nimport {isNullOrWhitespace} from \"../../../utils\";\nimport {PanelActionClickArgs, PanelActionDefinition, PanelActionType} from \"./models\";\n\n@Component({\n  tag: 'elsa-form-panel'\n})\nexport class FormPanel {\n  @Prop() public mainTitle: string;\n  @Prop() public subTitle: string;\n  @Prop() public isReadonly: boolean;\n  @Prop() public orientation: 'Landscape' | 'Portrait' = 'Portrait';\n  @Prop() public tabs: Array<TabDefinition> = [];\n  @Prop({mutable: true}) public selectedTabIndex?: number;\n  @Prop() public actions: Array<PanelActionDefinition> = [];\n\n  @Event() public submitted: EventEmitter<FormData>;\n  @Event() public selectedTabIndexChanged: EventEmitter<TabChangedArgs>;\n  @Event() public actionInvoked: EventEmitter<PanelActionClickArgs>;\n\n  public render() {\n    return this.renderPanel();\n  }\n\n  private onTabClick(e: Event, tab: TabDefinition) {\n    e.preventDefault();\n    const selectedTabIndex = this.selectedTabIndex = this.tabs.findIndex(x => tab == x);\n    this.selectedTabIndexChanged.emit({selectedTabIndex: selectedTabIndex});\n  }\n\n  private onSubmit(e: Event) {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    this.submitted.emit(formData);\n  }\n\n  private renderPanel() {\n    const tabs = this.tabs.sort((a, b) => a.order < b.order ? -1 : a.order > b.order ? 1 : 0);\n    const selectedTabIndex = this.selectedTabIndex;\n    const actions = this.actions;\n    const mainTitle = this.mainTitle;\n    const subTitle = this.subTitle;\n    const orientation = this.orientation;\n    const readonly = this.isReadonly;\n\n    return (\n      <div class=\"tw-absolute tw-inset-0 tw-overflow-hidden\">\n        <form class=\"tw-h-full tw-flex tw-flex-col tw-bg-white tw-shadow-xl\" onSubmit={e => this.onSubmit(e)} method=\"post\">\n        \n          <div class=\"tw-flex tw-flex-col tw-flex-1\">\n\n            {orientation == 'Portrait' && (\n              <div class=\"tw-px-4 tw-py-6 tw-bg-gray-50\">\n\n                <div class=\"tw-flex tw-items-start tw-justify-between tw-space-x-3\">\n                  <div class=\"tw-space-y-1\">\n                    <h2 class=\"tw-text-lg tw-font-medium tw-text-gray-900\">\n                      {mainTitle}\n                    </h2>\n                    {!isNullOrWhitespace(subTitle) ? <h3 class=\"tw-text-sm tw-text-gray-700\">{subTitle}</h3> : undefined}\n                  </div>\n                </div>\n              </div>)}\n\n            {orientation == 'Landscape' && (\n              <div class=\"tw-px-10 tw-py-4 tw-bg-gray-50\">\n                <div class=\"tw-flex tw-items-start tw-justify-between tw-space-x-3\">\n                  <div class=\"tw-space-y-0\">\n                    <h2 class=\"tw-text-base tw-font-medium tw-text-gray-900\">\n                      {mainTitle}\n                    </h2>\n                    {!isNullOrWhitespace(subTitle) ? <h3 class=\"tw-text-xs tw-text-gray-700\">{subTitle}</h3> : undefined}\n                  </div>\n                </div>\n              </div>)}\n\n            <div class={`tw-border-b tw-border-gray-200 ${orientation == 'Landscape' ? 'tw-pl-10' : 'tw-pl-4'}`}>\n              <nav class=\"-tw-mb-px tw-flex tw-justify-start tw-space-x-5\" aria-label=\"Tabs\">\n                {tabs.map((tab, tabIndex) => {\n                  const cssClass = tabIndex == selectedTabIndex ? 'tw-border-blue-500 tw-text-blue-600' : 'tw-border-transparent tw-text-gray-500 hover:tw-text-gray-700 hover:tw-border-gray-300';\n                  return <a href=\"#\"\n                            onClick={e => this.onTabClick(e, tab)}\n                            class={`${cssClass} tw-py-4 tw-px-1 tw-text-center tw-border-b-2 tw-font-medium tw-text-sm`}>\n                    {tab.displayText}\n                  </a>\n                })}\n              </nav>\n            </div>\n\n            <div class={`tw-flex-1 tw-relative`}>\n              <div class={`tw-absolute tw-inset-0 tw-overflow-y-scroll ${orientation == 'Landscape' ? 'tw-px-6' : ''}`}>\n               \n                {tabs.map((tab, tabIndex) => {\n                  const cssClass = tabIndex == selectedTabIndex ? '' : 'hidden';\n                  return <div class={cssClass}>\n                    <fieldset disabled={readonly}>\n                      {tab.content()}\n                    </fieldset>\n                  </div>\n                })}\n               \n              </div>\n            </div>\n          </div>\n\n          {actions.length > 0 ? (\n            <div class=\"tw-flex-shrink-0 tw-px-4 tw-border-t tw-border-gray-200 tw-py-5 sm:tw-px-6\">\n              <div class=\"tw-space-x-3 tw-flex tw-justify-end\">\n                {actions.map(action => {\n\n                  if (action.display)\n                    return action.display(action);\n\n                  const cssClass = action.isPrimary\n                    ? 'tw-text-white tw-bg-blue-600 hover:tw-bg-blue-700 tw-border-transparent focus:tw-ring-blue-500'\n                    : action.isDangerous ? 'tw-text-white tw-bg-red-600 hover:tw-bg-red-700 tw-border-transparent focus:tw-ring-red-500'\n                      : 'tw-bg-white tw-border-gray-300 tw-text-gray-700 hover:tw-bg-gray-50 focus:tw-ring-blue-500';\n\n                  const buttonType = action.type == PanelActionType.Submit ? 'submit' : 'button';\n\n                  const cancelHandler = () => {\n                  };\n\n                  const defaultHandler = (e: any, action: PanelActionDefinition) => this.actionInvoked.emit({e, action: action});\n                  const clickHandler = !!action.onClick ? action.onClick : action.type == PanelActionType.Cancel ? cancelHandler : defaultHandler;\n\n                  return <button type={buttonType}\n                                 onClick={e => clickHandler(e, action)}\n                                 class={`${cssClass} tw-py-2 tw-px-4 tw-border tw-rounded-md tw-shadow-sm tw-text-sm tw-font-medium focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-offset-2`}>\n                    {action.text}\n                  </button>\n                })}\n              </div>\n              </div>) : undefined}\n        \n        </form>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"}